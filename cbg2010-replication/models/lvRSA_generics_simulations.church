; example call

; time church -u lvRSA_generics_simulations.church &




;(define speaker-optimality 1)
(define context 'all)
(define task 'truth_conditions) ;;; depracated, but still need this

(define tasks '(how-many? true?)) ;; 1-to-1 map between QUD -- task

(define QUD (lambda (task quantifier)
              (case task
                    (('implied_prevalence) 'how-many)
                    (('truth_conditions) 'truth))))

(define uniform-score (lambda (lowerbound upperbound)
                        (- 0 (log (- upperbound lowerbound))))) ;;assuming values are in the range

(define all-true (lambda (lst) (apply and lst)))

(define string->boolean (lambda (str)
                          (equal? str 'True)))

;; background
(define (state-prior) (uniform-draw '(0 10 20 30 40 50 60 70 80 90 100)))
;(define (state-prior) (uniform-draw '(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100)))
;(define (theta-prior)  (uniform-draw '(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100)))
(define (theta-prior) (uniform-draw '(0 20 40 60 80)))

;(define (state-prior) (uniform-draw '(0 5 10 15 20 25 30 35 40 45 50)))
(define (qud-prior) (uniform-draw (list 'is-lorch 'who-is-it)))

(define (all state threshold) (= 100 state))
(define (not-all state threshold) (> 100 state))

(define (relaxed-all state threshold) (<= 90 state))

(define (some state some-threshold) (< some-threshold state))
(define (none state some-threshold) (>= some-threshold state))

(define (most state most-threshold) (< most-threshold state))
(define (anti-most state most-threshold) (>= most-threshold state))

(define (generic state generic-threshold) (< generic-threshold state))
(define (anti-generic state generic-threshold) (>= generic-threshold state))

(define (mu state dummy) true)
(define (how-many state dummy) state)

(define who-is-it? (lambda (state theta) (flip state)))

(define (raise-to-power dist alph)
  (list (first dist) (map (lambda (x) (pow x alph)) (second dist))))

(define (normalize dist)
  (list (first dist) (map (lambda (x) (/ x (sum (second dist)))) (second dist))))


(define (meaning word)
  (case word
        (('all) all)
        (('some) some)
        (('none) none)
        (('most) most)
        (('anti-most) anti-most)
        (('how-many) how-many)
        (('generic) generic)
        (('anti-generic) anti-generic)
        (('mu) mu)
        (('is-lorch) generic?)
        (('who-is-it) who-is-it?)
        (("how-many") how-many)
        ))



(define cognitive-model 
  ; (lambda (gamma delta speaker-optimality QUD evidence)
   (lambda (state-prior domain speaker-optimality QUD evidence)

     ;; input could be utterance (for listener / implied_prevalence)
     ;; or state (for speaker / truth_conditions)

(define (literal-meaning words state theta)
  (if (member words  '(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100))
    (equal? words state)
   (case words
    (("generic") ((meaning words) state theta))
    (("most") ((meaning words) state theta))
    (("anti-most") ((meaning words) state theta))
    (("all") ((meaning words) state 99))
    (("not-all") ((meaning words) state 99))
    (("some") ((meaning words) state 1))
    (("none") ((meaning words) state 1))
    (("anti-generic") ((meaning words) state theta))
    (("mu") ((meaning words) state null)))))

;  (define (number-words-prior) (uniform-draw '(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100)))
  (define (number-words-prior) (uniform-draw '(0 10 20 30 40 50 60 70 80 90 100)))

  (define (utterance-prior) 
    (uniform-draw 
      (if (equal? QUD "how-many")
 ;    (list "some" "mu")
 ;       (list "some" "most")
       (list "generic" "mu")
     (list "generic" "mu")
;        (list "generic" "anti-generic")
;       (list "generic" "some" "most")
      ; (list "some" "most" "all")
      ; 
    ;   (list "most" "all")
    ;   (list "most" "anti-most")
    )))

    (define speaker2_TC
      (mem (lambda (state)
      (enumeration-query
        (define nL1 (number-listener1 state))
        (define prevalence (apply multinomial nL1))

   ;     (define QUD-val ((meaning QUD) prevalence (theta QUD)))

        (define words (utterance-prior))
;        (define words (uniform-draw alternatives))

       words

       (equal? prevalence (apply multinomial (word-listener1 words)))))))

    (define speaker2_IP
      (mem (lambda (words)
      (enumeration-query
        (define number-words (number-words-prior))
        (define wL1 (word-listener1 words))
        (define prevalence (apply multinomial wL1))
  ;      (define QUD-val ((meaning QUD) prevalence (theta QUD)))

       number-words

       (equal? prevalence (apply multinomial (number-listener1 number-words)))))))


     (define word-listener1
       (mem (lambda (words) ;; listener1 does do inference over theta
              (enumeration-query
               (define state (state-prior domain))
               (define generic-theta (theta-prior))
               (define anti-generic-theta (theta-prior))

;               (define generic-theta (uniform-draw '(49 50)))
             ; (define (theta words)
             ;   (theta-meaning (string-append words '-theta)))

             ;  (define (theta-meaning word)
             ;   (case word
             ;         (('most-theta) 50)
             ;         (('some-theta) 1)
             ;         (('generic-theta) generic-theta)
             ;         (('how-many-theta) 'null)
             ;         (('anti-generic-theta) generic-theta)
             ;         (('none-theta) 1)
             ;         (('anti-most-theta) 50)))
                           
             ;   (define QUD-val ((meaning QUD) state (theta QUD)))
          ;      (define blah (display generic-theta))
 ;              generic-theta
                state
                ;generic-theta
                ;QUD-val

               (equal? words 
                (apply multinomial 
                  (raise-to-power 
                    (word-speaker1 state generic-theta anti-generic-theta) 
                   speaker-optimality)))))))

      (define number-listener1
       (mem (lambda (number-words) ;; listener1 does do inference over theta
              (enumeration-query
               (define state (state-prior domain))
               (define generic-theta (theta-prior))
;               (define generic-theta (uniform-draw '(49 50)))

             ; (define (theta words)
             ;   (theta-meaning (string-append words '-theta)))

             ;  (define (theta-meaning word)
             ;   (case word
             ;         (('most-theta) 50)
             ;         (('some-theta) 1)
             ;         (('generic-theta) generic-theta)
             ;         (('how-many-theta) 'null)
             ;         (('anti-generic-theta) generic-theta)
             ;         (('none-theta) 1)
             ;         (('anti-most-theta) 50)))


             ;   (define QUD-val ((meaning QUD) state (theta QUD)))
          ;      (define blah (display generic-theta))

 ;              generic-theta
                state
;                QUD-val

               (equal? number-words 
                (apply multinomial 
                  (raise-to-power 
                    (number-speaker1 state generic-theta) 
                   speaker-optimality)))))))

     (define word-speaker1
       (mem (lambda (state generic-theta anti-generic-theta)
              (enumeration-query
               
        ;        (define words (uniform-draw (list 'generic 'mu 'mu 'mu)))
              (define words (utterance-prior))
;              (define words (uniform-draw alternatives))
             ; (define (theta words)
             ;   (theta-meaning (string-append words '-theta)))

             ;  (define (theta-meaning word)
             ;   (case word
             ;         (('most-theta) 50)
             ;         (('some-theta) 1)
             ;         (('generic-theta) generic-theta)
             ;         (('how-many-theta) 'null)
             ;         (('anti-generic-theta) generic-theta)
             ;         (('none-theta) 1)
             ;         (('anti-most-theta) 50)))
                ;(define words (uniform-draw (list 'generic-lorch 'generic-other)))

               ; (define words
               ;   (case QUD
               ;         (('generic)  (uniform-draw (list 'generic 'anti-generic)))
               ;         (('some) (uniform-draw (list 'some 'none)))
               ;         (('most) (uniform-draw (list 'most 'anti-most)))
               ;         (('how-many) (uniform-draw (list 'most 'some 'generic)))))
              ; (define QUD-val ((meaning QUD) state (theta QUD)))

               words

;               (equal? QUD-val
               (equal? state
                       (apply multinomial (listener0 words generic-theta anti-generic-theta)))))))

     (define number-speaker1
       (mem (lambda (state generic-theta)
              (enumeration-query
               
      ;          (define words (uniform-draw (list 'generic 'mu)))
              (define number-words (number-words-prior))

              ; (if (equal? QUD 'truth)
              ;                 (uniform-draw (list 'generic 'anti-generic))
              ;                 (uniform-draw (list 'generic 'mu))))

                ;(define words (uniform-draw (list 'generic-lorch 'generic-other)))

               ; (define words
               ;   (case QUD
               ;         (('generic)  (uniform-draw (list 'generic 'anti-generic)))
               ;         (('some) (uniform-draw (list 'some 'none)))
               ;         (('most) (uniform-draw (list 'most 'anti-most)))
               ;         (('how-many) (uniform-draw (list 'most 'some 'generic)))))

             ; (define (theta words)
             ;   (theta-meaning (string-append words '-theta)))

             ;  (define (theta-meaning word)
             ;   (case word
             ;         (('most-theta) 50)
             ;         (('some-theta) 1)
             ;         (('generic-theta) generic-theta)
             ;         (('how-many-theta) 'null)
             ;         (('anti-generic-theta) generic-theta)
             ;         (('none-theta) 1)
             ;         (('anti-most-theta) 50)))

             ;   (define QUD-val ((meaning QUD) state (theta QUD)))

               number-words

               (equal? state
;               (equal? state
                       (apply multinomial (listener0 number-words generic-theta)))))))

     (define listener0
       (mem (lambda (words generic-theta anti-generic-theta) 
              (enumeration-query
               (define state (state-prior domain))

              ; (define (theta words)
              ;  (theta-meaning (string-append words '-theta)))

              ; (define (theta-meaning word)
              ;  (case word
              ;        (('most-theta) 50)
              ;        (('some-theta) 1)
              ;        (('generic-theta) generic-theta)
              ;        (('how-many-theta) 'null)
              ;        (('anti-generic-theta) generic-theta)
              ;        (('none-theta) 1)
              ;        (('anti-most-theta) 50)))

              ;  (define QUD-val ((meaning QUD) state (theta QUD)))

               ;QUD-val
               state

               ; (case words
               ;  (('generic) ((meaning words) state generic-theta))
               ;  (('most) ((meaning words) state 50))
               ;  (('some) ((meaning words) state 1))
               ;  (('anti-generic) ((meaning words) state generic-theta))
               ;  (('mu) ((meaning words) state null)))
               
               (case words
                (('generic) (literal-meaning words state generic-theta))
                (('anti-generic) (literal-meaning words state anti-generic-theta))
                (('mu) true)
                (else (literal-meaning words state generic-theta)))
               ))))

 

     (if (equal? QUD "how-many")
        (normalize (raise-to-power (speaker2_IP evidence) speaker-optimality))
        (speaker2_TC evidence))
;        (normalize  (raise-to-power (speaker2_TC evidence) speaker-optimality)))

                ;  (normalize (raise-to-power (speaker2 evidence) speaker-optimality))
        ;  (listener1 'generic)

  ;  (word-listener1 "generic")
  ;(number-listener1 10)
;    (listener0 "mu" 0 0)

          ))



(define bins '(0.01 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.99))


; (define gamma 0.5) ; nzhikes (beta 3 3)
; ; (define delta 2)
; (define discretize-beta (lambda (gamma delta bins)
;     (define shape_alpha (* gamma delta))
;     (define shape_beta (* (- 1 gamma) delta))
;     (define beta-pdf (lambda (x) 
;       (*
;         (pow x (- shape_alpha 1))
;         (pow (- 1 x) (- shape_beta 1)))))
;   (map beta-pdf bins)))
;   (define quintile-probs (discretize-beta gamma delta bins))



(define discretize-beta (lambda (shape_alpha shape_beta bins)
    (define beta-pdf (lambda (x) 
      (*
        (pow x (- shape_alpha 1))
        (pow (- 1 x) (- shape_beta 1)))))
  (map beta-pdf bins)))

;typical
(define quintile-probs (discretize-beta 5 5 bins))


;biological
;(define quintile-probs (discretize-beta 0.01 0.032 bins))
(define normalize-list (lambda (lst) (map (lambda (x) (/ x (sum lst))) lst)))

; gendered
; (define quintile-probs 
;   (map + (normalize-list (discretize-beta 50 50 bins))
;           (normalize-list (discretize-beta 10 1000 bins))))

;rare
; (define quintile-probs 
;    (map + (normalize-list (discretize-beta 10 90 bins))
;            (normalize-list (discretize-beta 10 1000 bins))))


(define state-prior (lambda () (* 10 (round (* 10 (multinomial bins quintile-probs))))))

; (define (state-prior domain) 
;   (multinomial '(0 10 20 30 40 50 60 70 80 90 100)
;     (case domain
;       (("bare") '(448 157 199 59 59 80 38 33 26 15 68))
;       (("danger-distinct") '(690 159 94 24 21 39 21 12 26 14 127))
;       (("nondistinctive") '(342 144 246 60 68 93 50 15 45 24 95))
;       (("accidental") '(283 176 186 116 120 87 95 52 56 8 21))
;       (("birds lay eggs") '(100 10 2 2 2 20 2 2 2 2 2))
;       (("birds are female") '(2 2 2 2 2 1000 2 2 2 2 2))
;       (("mosquito") '(140 90 1 1 1 1 1 1 1 1 1))
;       (("pollution") '(1 2 4 8 4 2 1 1 1 1 1))
;       (("oxygen") '(1 1 1 1 1 1 20 40 80 40 20))
;       )))

; (define (state-prior domain) 
;   (multinomial '(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100)
;     (case domain
;       (("bare") '(506 68 139 21 45 22 28  9 11  6 40  5  7  4  3  8  7  3 13  2  53))
;       (("danger") '(555 70 129 17 40 15 22  6  8  8 31  4 14  2  8 14  7  1 14  3  33))
;       (("distinct") '(694 45  90 10 32 12  8  3  6  5 18  1  1  5  2  3  3  4  5  3  51))
;       )))



(define prevlevs '(10 30 50 70 90))

;(define prevlevs '(10 30))


;(define domain "bare")

(define quantifier "generic")
(define alpha 1)

;(cognitive-model state-prior domain alpha "truth" quantifier)


;;(define level 10)
(define tcpreds (lambda (alpha domain)

  (define t-c-posteriors 
    (map (lambda (level) 
    (cognitive-model state-prior domain alpha quantifier level)) prevlevs))


  ;t-c-posteriors

  (define truth-conditions 
    (map (lambda (posterior)
          (let ([pos (position (first posterior) quantifier)])
            (if (>= pos 0)  (list-ref (second posterior) pos) 0)
          ))
  t-c-posteriors))

  (display truth-conditions)
))

; (map (lambda (ratdom) (tcpreds (first ratdom) (second ratdom)))
;   (list 
;     '(1 "bare")
;     '(1 "distinct")
;     '(3 "bare")
;     '(3 "distinct")
;     '(5 "bare")
;     '(5 "distinct")))

(tcpreds 1 "mosquito")

; (define average-tc-prevalence
;   (sum (map (lambda (x y) 
;         (* x y))
;   (normalize-list truth-conditions) 
; ;  truth-conditions
;   prevlevs)))

; (display "average truth conditions is " average-tc-prevalence)

; (define i-p-posteriors
;   (cognitive-model state-prior domain alpha "how-many" quantifier))

; (define implied-prevalence
;     (sum (map 
;             (lambda (x y) (* x y)) 
;           (first i-p-posteriors) (second i-p-posteriors))))

; (display "implied prevalence is " implied-prevalence)



; (list (list average-tc-prevalence implied-prevalence) truth-conditions)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; bootstrapping priors;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; (define bspriors (read-csv "bootstrap_ddnnp_priors.csv"))

; (define get-counts (lambda (x)
;   (rest (rest x))))
; (define numerify-list (lambda (lst) 
;   (map string->number lst)))

; (define make-3s 
;   (lambda (lst)
;     (if (null? lst)
;       '()
;       (pair 
;         (list (/ (- (string->number (first (first lst))) 1) 3)
;           (list (numerify-list (get-counts (first lst)))
;                 (numerify-list (get-counts (second lst)))
;                 (numerify-list (get-counts (third lst)))
;                 ))
;         (make-3s (rest (rest (rest lst))))))))



; (define bspriors_organized (make-3s (rest bspriors)))


; (define output-path
;    '/Users/mht/Documents/research/generics/cbg2010-replication/models/bayesian_analysis/bootstrap/)

; (define bs-samples
; (map 
;   (lambda (bspr)

;     (define sample_no (number->string (first bspr)))

;     (define bootstrapp-priors (second bspr))

;     (define (state-prior domain)
;         (multinomial '(0 10 20 30 40 50 60 70 80 90 100)

;         (case domain
;       (("bare") (first bootstrapp-priors))
;       (("danger")  (second bootstrapp-priors))
;       (("distinct")  (third bootstrapp-priors)))))

;       (define t-c-posteriors 
;         (map (lambda (domain)
;           (map 
;             (lambda (level) 
;               (cognitive-model state-prior domain alpha quantifier level)) 
;           prevlevs))
;         (list "bare" "danger" "distinct")
;         ))

;       (define truth-conditions 
;         (map (lambda (domain-posteriors)
;           (map
;             (lambda (posterior)
;                 (let ([pos (position (first posterior) quantifier)])
;                   (if (>= pos 0)  (list-ref (second posterior) pos) 0)
;                 ))
;             domain-posteriors))
;       t-c-posteriors))


;     (define average-tc-prevalence
;       (map (lambda (truthcondresults)
;         (sum (map (lambda (x y) 
;               (* x y))
;         (normalize-list truthcondresults) 
;       ;  truth-conditions
;         prevlevs)))
;       truth-conditions))

;     (define i-p-posteriors
;       (map (lambda (domain)
;           (cognitive-model state-prior domain 2 "how-many" quantifier))
;       (list "bare" "danger" "distinct")))

;     (define implied-prevalence
;       (map 
;         (lambda (ippost)
;           (sum (map 
;                   (lambda (x y) (* x y)) 
;                 (first ippost) (second ippost))))
;         i-p-posteriors))


;     ;(define samples (transpose (list (tfbt-model (QUD task quantifier) quantifier (second bspr)))))

;     ; (define output-file-name (string-append  output-path 
;     ;   'lvRSAemprior_truthconditions_
;     ;   'sepDD
;     ;   'bootstrap
;     ;   sample_no
;     ;   '_mh mh_samples 
;     ;   '_ mh_lag '.csv))

;    ; (write-csv samples output-file-name)
;     (display (string-append "bootstrap " sample_no " complete"))
;     (list truth-conditions average-tc-prevalence implied-prevalence)
;     )

;   bspriors_organized)
; )
; (write-csv bs-samples  (string-append output-path "truthconditions_exp1_S2_bootstrap_alpha1_alpha2.csv"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;; bootstrapping single-domain priors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; (define bspriors (read-csv "bootstrap_acc_priors_short.csv"))


;(define domain "accidental")

; (define numerify-list (lambda (lst) 
;   (map string->number lst)))


; (define bspriors_organized (map 
;   (lambda (lst) (numerify-list lst))
;   (rest bspriors)))


; (define bspriors_organized (list 
; (list 1 175 102 130 74  85  61  66  26  31  5 6)
; (list 2  182 121 105 71  68  53  57  33  47  8 16)
; (list 3  199 120 107 67  69  32  65  30  26  8 8)
; (list 4  192 114 101 57  65  43  51  23  37  8 10)
; (list 5  170 114 135 80  76  49  69  38  39  8 13)
; (list 6  187 90  93  60  68  61  59  32  29  5 17)
; (list 7  189 70  99  72  90  56  84  41  42  8 10)
; (list 8  173 92  123 83  89  75  75  37  45  7 22)
; (list 9  154 98  107 72  73  64  64  37  42  5 15)
; (list 10  176 139 113 58  77  54  62  30  30  6 16)
; (list 11  162 97  117 74  84  68  60  33  43  5 18)
; (list 12  158 130 104 70  72  57  63  36  44  6 21)
; (list 13 148 108 101 62  69  66  55  36  31  3 22)
; (list 14 159 102 133 77  54  47  59  33  46  6 15)
; (list 15  115 121 132 80  78  62  71  42  42  7 11)))


; (define output-path
;    '/Users/mht/Documents/research/generics/cbg2010-replication/models/bayesian_analysis/bootstrap/)

; (define bs-samples
; (map 
;   (lambda (bspr)

;     (define sample_no (number->string (first bspr)))

;     (define bootstrapp-priors (rest bspr))

;     (define (state-prior domain)
;         (multinomial '(0 10 20 30 40 50 60 70 80 90 100) bootstrapp-priors))

;       (define t-c-posteriors 
;           (map 
;             (lambda (level) 
;               (cognitive-model state-prior domain 1 quantifier level)) 
;           prevlevs))
  

;       (define truth-conditions 
;           (map
;             (lambda (posterior)
;                 (let ([pos (position (first posterior) quantifier)])
;                   (if (>= pos 0)  (list-ref (second posterior) pos) 0)
;                 ))
;             t-c-posteriors))

;     (define average-tc-prevalence
;         (sum (map (lambda (x y) 
;               (* x y))
;         (normalize-list truth-conditions) 
;       ;  truth-conditions
;         prevlevs)))

;     (define i-p-posteriors
;           (cognitive-model state-prior domain 1 "how-many" quantifier))

;     (define implied-prevalence
;           (sum (map 
;                   (lambda (x y) (* x y))
;                 (first i-p-posteriors) 
;                 (second i-p-posteriors))))


;     ;(define samples (transpose (list (tfbt-model (QUD task quantifier) quantifier (second bspr)))))

;     ; (define output-file-name (string-append  output-path 
;     ;   'lvRSAemprior_truthconditions_
;     ;   'sepDD
;     ;   'bootstrap
;     ;   sample_no
;     ;   '_mh mh_samples 
;     ;   '_ mh_lag '.csv))

;    ; (write-csv samples output-file-name)
;     (display (string-append "bootstrap " sample_no " complete"))
;     (list truth-conditions average-tc-prevalence implied-prevalence)
;     )

;   bspriors_organized)
; )
; (write-csv bs-samples  (string-append output-path "truthconditions_short-exp1_S2_accidental_bootstrap_alpha1_alpha1.csv"))


