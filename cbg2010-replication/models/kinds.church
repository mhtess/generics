(define kind-given-property ;; probability of a kind given observing the property
    (lambda (prevalence context)
        (enumeration-query

        ;; here, we say XX% lorches have purple feathers means if we find a lorch
        ;; then (flip XX) it has purple feathers

        (define other-kind-prevalence ;; presumably, measure this empirically.
            (case context
                (('nondistinct) 0.7)
                (('bare) 0.3)
                (('distinct) 0.1)))

        (define observe-property 
            (lambda (prevalence kind)
            (or (and (equal? kind 'lorch) (flip prevalence))
                (and (equal? kind 'other) (flip other-kind-prevalence)))))

        (define kind (uniform-draw '(lorch other)))

        kind
   
        (observe-property prevalence kind)))) ;; condition on: observing purple feathers


(define get-lorch-prob (lambda (lst)
    (list-ref (second lst) (position (first lst) 'lorch))))

(define generic? (lambda (property-predictive-power threshold) (> property-predictive-power threshold)))
(define no-generic? (lambda (property-predictive-power threshold) (<= property-predictive-power threshold)))
(define who-is-it? (lambda (state theta) (flip state)))
(define not-lorch? (lambda (state theta) (not (flip state))))

(define meaning (lambda (word)
    (case word
        (('yes) generic?)
        (('no) no-generic?)
        (('not-a-lorch) not-lorch?)
        (('is-lorch) generic?)
        (('who-is-it) who-is-it?))))

(define (theta-prior) (uniform-draw '(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)))
(define (state-prior) (uniform-draw '(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1)))
(define (utterance-prior) (uniform-draw '(yes no)))
(define (qud-prior) (uniform-draw (list 'is-lorch 'who-is-it)))

(define speaker1-of-kinds
    (mem (lambda (prevalence context)
    (enumeration-query 

        (define theta (theta-prior))
        (define predictive-power (get-lorch-prob (kind-given-property prevalence context))) 

        (define qud (qud-prior))
        (define words (utterance-prior)) 

        (define QUDval ((meaning qud) predictive-power theta))


        words

        (equal? QUDval
            (apply multinomial (listener0-of-kinds words theta qud)))))))


(define listener0-of-kinds
    (mem (lambda (words theta qud)
        (enumeration-query
            (define prevalence (state-prior))
            (define QUDval ((meaning qud) prevalence theta))
            
            QUDval

            ((meaning words) prevalence theta)))))


(list
    (speaker1-of-kinds 0.3 'bare)
    (speaker1-of-kinds 0.3 'distinct)
    (speaker1-of-kinds 0.3 'nondistinct))


; (define listener1
;   (mem (lambda (words QUD) ;; listener1 does inference over theta
;   (enumeration-query
;    (define theta (uniform-draw '(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)))
;    ;(define theta-most (threshold-most-prior))
;    (define prevalence (state-prior))
;    (define state (get-true-prob (pr-kind-given-property prevalence context))) 
;    (define QUD-val ((meaning words) state theta))

;   state

;    (equal? words 
;     (apply multinomial (raise-to-power (speaker1-of-kinds state theta) alpha)))))))



;(kind-given-property 0.5 'bare)


; (define get-yes-prob (lambda (lst)
;     (list-ref (second lst) (position (first lst) 'yes))))

;     ;(map (lambda (x) (get-true-prob (kind-given-property 'lorch x 'si))) (list 0.1 0.3 0.5 0.7 0.9))
; ;(map (lambda (x y) (get-yes-prob (speaker1-of-kinds x y))) (list 0.1 0.3 0.5 0.7 0.9) (list #t #t #t #t #t))

; (map (lambda (x y) (get-yes-prob (speaker1-of-kinds x y))) 
;     (list 0.1 0.3 0.5 0.7 0.9) (list #f #f #f #f #f))

;(map speaker1-of-kinds (list 0.1 0.3 0.5 0.7 0.9) (list #f #f #f #f #f))


