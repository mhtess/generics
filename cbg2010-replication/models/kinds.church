(define pr-kind-given-property ;; probability of a kind given observing the property
    (lambda (prevalence distinctive)
  (enumeration-query

    (define other-kind-prevalence 
            (if distinctive 0.1 0.7))

    (define observe-property 
        (lambda (prevalence kind)
        (or (and (equal? kind 'morseth) (flip prevalence))
            (and (equal? kind 'other) (flip other-kind-prevalence)))))
    (define kind (uniform-draw '(morseth other)))

    (equal? kind 'morseth)
   
    (observe-property prevalence kind)))) ;; prevalence % of kind have property

(define get-true-prob (lambda (lst)
    (list-ref (second lst) (position (first lst) #t))))

(define generic? (lambda (property-predictive-power threshold) (> property-predictive-power threshold)))
(define no-generic? (lambda (property-predictive-power threshold) (<= property-predictive-power threshold)))

(define meaning (lambda (word)
    (case word
        (('yes) generic?)
        (('no) no-generic?))))

(define (state-prior) (uniform-draw '(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1)))

(define listener0-of-kinds
    (mem (lambda (words theta)
        (enumeration-query
            (define state (state-prior))
            (define QUD-val ((meaning words) state theta))

            QUD-val

            ((meaning words) state theta)))))


(define speaker1-of-kinds
    (mem (lambda (prevalence distinctive)
    (enumeration-query 
        (define theta (uniform-draw '(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)));; threshold for claiming the generic to be true
        ;; doesn't operate over prevalence but predictive power
        (define words (uniform-draw '(yes no)))
        
        (define label 'morseth)
        (define property 'silver-fur)

        (define state (get-true-prob (pr-kind-given-property prevalence distinctive))) ;;; state is the p(kind | property)
        (define QUD-val ((meaning words) state theta));; to complete.
        
        words
       ; (listener-of-kinds words theta)
        ;state

        ;true))
          (equal? QUD-val
             (apply multinomial (listener0-of-kinds words theta)))))))



;(kind-given-property kind prevalence property)
;(map (lambda (x) (get-true-prob (kind-given-property 'morseth x 'si))) (list 0.1 0.3 0.5 0.7 0.9))
(map speaker1-of-kinds (list 0.1 0.3 0.5 0.7 0.9) (list #t #t #t #t #t))
;(map speaker1-of-kinds (list 0.1 0.3 0.5 0.7 0.9) (list #f #f #f #f #f))


