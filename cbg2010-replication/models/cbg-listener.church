(define (state-prior) (uniform-draw '(0 1 3 5 7 9 10)))

(define (all state) (= 10 state))
(define (some state) (< 0 state))
(define (none state) (= 0 state))
(define (most state) (< 5 state))

(define (how-many state) state)

; pass strings, which then call functions of the same name
(define (meaning word)
  (case word
        (('all) all)
        (('some) some)
        (('most) most)
        (('none) none)
        (('how-many) how-many)))

(define listener1
  (mem (lambda (words QUD) 
  (enumeration-query
   (define state (state-prior))
   (define QUD-val ((meaning QUD) state))
   
   QUD-val

   (equal? words (apply multinomial (speaker1 state QUD)))))))

(define speaker1
  (mem (lambda (state QUD)
  (enumeration-query
   ;(define QUD (if (flip) 'some 'state))
   ;(define words (uniform-draw (list 'some 'none)))
   (define words (uniform-draw (list 'none 'some 'most 'all)))
   (define QUD-val ((meaning QUD) state))

   words

   (equal? QUD-val
    (apply multinomial (listener0 words QUD)))))))

(define listener0
  (mem (lambda (words QUD) 
    (enumeration-query
    (define state (state-prior))
    (define QUD-val ((meaning QUD) state))

    QUD-val

    ;(if (flip 0.95)
      ((meaning words) state)
     ; true)
    ))))

;(map (lambda (x) (listener1 x 'how-many)) (list 'none 'some 'most 'all))
;(map (lambda (x) (listener1 x 'some)) (list 'none 'some 'most 'all))

;(map (lambda (x) (speaker1 x 'how-many)) '(1 3 5 7 9 10))
(map (lambda (x) (speaker1 x 'some)) '(1 3 5 7 9 10))
