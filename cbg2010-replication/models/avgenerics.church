(define qud-set (list "p" "s"))
(define (qud-prior) (multinomial qud-set '(1 1)))

(define (qud-fn qud)
	(case qud
		(("p") (lambda (prevalence salience) prevalence))
		(("s") (lambda (prevalence salience) salience))
		(("sp") (lambda (prevalence salience) (list prevalence salience)))
		(else "error")
		)
	)

(define (meaning utterance prevalence salience prevalence-threshold salience-threshold qud)
	(case utterance
		(("generic") (generic prevalence salience prevalence-threshold salience-threshold qud))
		(("not-generic") (not (generic prevalence salience prevalence-threshold salience-threshold qud)))
		(("mu") true)
		(else (equal? utterance prevalence))))

(define (generic prevalence salience prevalence-threshold salience-threshold qud)
	(case qud
		(("p") (> prevalence prevalence-threshold))
		(("s") (> salience salience-threshold))
		(("sp") (and (> prevalence prevalence-threshold) (> salience salience-threshold)))
		(else "error")))

(define (utterance-prior) (uniform-draw (list "generic" "not-generic")))

; (define (prevalence-prior) 
;   (multinomial '(0 10 30 50 70 90 100)
; 	  		   '(564 155 30 30 6 15 54)))

(define (prevalence-prior domain) 
  (multinomial '(0 10 20 30 40 50 60 70 80 90 100)
    (case domain
    ;  (("bare") '(448 157 199 59 59 80 38 33 26 15 68))
      (("danger-distinct") '(690 159 94 24 21 39 21 12 26 14 127))
      (("nondistinctive") '(342 144 246 60 68 93 50 15 45 24 95))
      (("accidental") '(283 176 186 116 120 87 95 52 56 8 21))
      (("birds lay eggs") '(100 10 2 2 2 20 2 2 2 2 2))
      (("birds are female") '(2 2 2 2 2 1000 2 2 2 2 2))
      (("mosquito") '(140 90 1 1 1 1 1 1 1 1 1))
      (("pollution") '(1 2 4 8 4 2 1 1 1 1 1))
      (("oxygen") '(1 1 1 1 1 1 20 40 80 40 20))
	  (("bare") '(564 155 80 35 21 41 14  6 15 15  54))
	  (("danger") '(617 139 69 26 19 33 17 10 20 16  34))
	  (("distinct") '(735 96 52 10 10 20 6 2 9 8 52)))))


(define (salience-prior)
	(multinomial '(1 2 3) '(30 10 1)))

(define literal-listener
	(mem (lambda (utterance qud prevalence-threshold salience-threshold)
		(enumeration-query
			(define prevalence (prevalence-prior domain))
			(define salience (salience-prior))

			;(list prevalence salience)	
			((qud-fn qud) prevalence salience)

			;(equal? 
			(meaning utterance prevalence salience prevalence-threshold salience-threshold qud)
		 		))))


; not sure if speaker is communicating full world, or just QUDval
(define speaker
	(mem (lambda (val prevalence salience qud prevalence-threshold salience-threshold)
		(enumeration-query
			(define utterance (utterance-prior))

			utterance

			(equal? val;(list prevalence salience)
				(apply multinomial
					(literal-listener utterance qud prevalence-threshold salience-threshold))
				)
			)
		)))


(define listener
	(mem (lambda (utterance qud)
		(enumeration-query
			(define prevalence (prevalence-prior domain))
			(define salience (multinomial '(1 2 3) '(30 10 1)))

			(define prevalence-threshold (uniform-draw '(0 20 40 60 80 90)))
			(define salience-threshold (uniform-draw '(0 1 2)))
			(define val ((qud-fn qud) prevalence salience))

			(list prevalence salience)	
		

			(equal? utterance
				(apply multinomial 
					(speaker val prevalence salience qud prevalence-threshold salience-threshold)))))))




(define truth-conditions
	(mem (lambda (prevalence salience)
		(enumeration-query
			; the generic is ambiguous between a prevalence and a salience reading 
			(define qud (qud-prior))
			; this generic has an interpretation
			;(define words ((qud-fn qud) prevalence-word salience-word))
			(define utterance (utterance-prior))

			utterance

			(equal? (list prevalence salience)
					(apply multinomial (listener utterance qud)))))))


(define domain "danger")
(truth-conditions 10 1)
;(literal-listener "generic" "p" 0 0)


