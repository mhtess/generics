(define (get-indices needle haystack)
  (define (loop rest-of-haystack index)
    (if (null? rest-of-haystack) '()
        (let ((rest-of-indices (loop (rest rest-of-haystack) (+ index 1))))
          (if (equal? (first rest-of-haystack) needle)
              (pair index rest-of-indices)
              rest-of-indices))))
  (loop haystack 1))



(define (marginalize output)
  (let ([states (first output)])
    (map (lambda (sub-output) 
           (let* ([probs (second output)]
                  [unique-states (unique sub-output)]
                  [unique-state-indices 
                   (map 
                    (lambda (x) (list x (get-indices x sub-output))) 
                    unique-states)])

             (list (map first unique-state-indices)
                   (map 
                    (lambda (y) (sum (map 
                                      (lambda (x) (list-elt probs x)) 
                                      (second y)))) 
                    unique-state-indices))))
         (transpose states))))


(define nearest-soft (lambda (p)
            (if (= p 100)
                90
                (if (= (mod p 20) 0)
                    (+  p 10)
                    p))))

; following schema of Kao et al. 2014 hyperbole

(define states 
 (list 0 10 20 30 40 50 60 70 80 90 100))

; (define (state-prior) (uniform-draw states))

;(define (state-prior) (multinomial states '(40 30 1 1 1 1)))

; (define (prevalence-prior domain) 
;   (multinomial '(0 10 20 30 40 50 60 70 80 90 100)
;     (case domain
;     ;  (("bare") '(448 157 199 59 59 80 38 33 26 15 68))
;       (("danger-distinct") '(690 159 94 24 21 39 21 12 26 14 127))
;       (("nondistinctive") '(342 144 246 60 68 93 50 15 45 24 95))
;       (("accidental") '(283 176 186 116 120 87 95 52 56 8 21))
;       (("birds lay eggs") '(100 10 2 2 2 20 2 2 2 2 2))
;       (("birds are female") '(2 2 2 2 2 1000 2 2 2 2 2))
;       (("mosquito") '(140 90 1 1 1 1 1 1 1 1 1))
;       (("pollution") '(1 2 4 8 4 2 1 1 1 1 1))
;       (("oxygen") '(1 1 1 1 1 1 20 40 80 40 20))
; 	  (("bare") '(564 155 80 35 21 41 14  6 15 15  54))
; 	  (("danger") '(617 139 69 26 19 33 17 10 20 16  34))
; 	  (("distinct") '(735 96 52 10 10 20 6 2 9 8 52)))))


; (define (prevalence-prior domain) 
;   (multinomial '(0 10 30 50 70 90 100)
;     (case domain
; 	  (("bare") '(564 155 35 41  6 15  54))
; 	  (("danger") '(617 139 26 33 10 16  34))
; 	  (("distinct") '(735 96 10 20  2 8 52)))))

; (define (salience-prior state domain)
; 	(flip 
; 		(second
; 	(case domain
; 		(("bare") (assoc state (zip (list 10 30 50 70 90) (list 0.2081667 0.2586667 0.3123333 0.4056667 0.3875000))))
; 		(("danger") (assoc state (zip (list 10 30 50 70 90) (list 0.8068333 0.8345000 0.8650000 0.8971667 0.9291667))))
; 		(("distinct") (assoc state (zip (list 10 30 50 70 90) (list 0.3435000 0.4360000 0.4971667 0.4853333 0.5420000))))))))

(define (salience-prior state domain)
	(multinomial '(0 10 30 50 70 90 100)
		(case domain
			(("bare") '(1 4 4 1 1 1 1))
			(("danger") '(1 1 1 1 1 5 7))
			(("distinct") '(1 1 4 6 4 1 1)))))


;(define (theta-prior) (uniform-draw '(0 10 20 40 60 80 100)))
(define (theta-prior) (uniform-draw '(0 20 40 60 80 100)))
(define (salience-theta-prior) (uniform-draw '(0 20 40 60 80 100)))

; justine has states --> is-expensive? (which for her is valance)

; for mosquitos with wnv, any prevalence would be worrisome, because it's so bad
; could be formulated as "how surprising would it be"

; here: the more the scarrier
; (define (valence-prior state domain) ;(flip (abs (- (/ state 100) 0.01))))
; 	(case domain
; 		(("bare") (flip (/ (abs (- (/ state 100) 0.01)) 10)))
; 		(("danger-distinct") (flip (abs (- (/ state 100) 0.01))))
; 		(else false)))



;	(flip (abs (- (/ state 100) 0.01))))




(define utterances (list "generic" "not-generic" "mu" 0 100 10 30 50 70 90))

;(define (true-false) (uniform-draw (list "generic" "not generic")))


(define (true-false) (uniform-draw (list "generic" "not-generic")))

(define (utterance-prior) (multinomial utterances '(1 1 1 1 1 1 1 1 1 1))) ; subject to revision

(define (meaning utterance prevalence salience prevalence-threshold salience-threshold qud)
	(case utterance
		(("generic") (generic prevalence salience prevalence-threshold salience-threshold qud))
		(("not-generic") (not (generic prevalence salience prevalence-threshold salience-threshold qud)))
		(("mu") true)
		(else (equal? utterance prevalence))))

(define (generic prevalence salience prevalence-threshold salience-threshold qud)
	(case qud
		(("p") (> prevalence prevalence-threshold))
		(("s") (> salience salience-threshold))
		(("sp") (and (> prevalence prevalence-threshold) (> salience salience-threshold)))
		(else "error")))


(define subject 
	(lambda (prev domain)
		(enumeration-query

			(define valence (valence-prior (nearest-soft prev) domain))

			(define speaker-model (S2 (list prev valence) domain))
			; get the posterior probability of "generic"
			(define posterior-prob (list-ref (second speaker-model) (position (first speaker-model) "generic")))

			posterior-prob

			true)))

(define salience-listener 
	(mem (lambda (domain) 
		(enumeration-query
		(define salience (salience-prior 10 domain))
		(define salience-threshold (salience-theta-prior))
		
		salience
		
		(equal? domain (apply multinomial (salience-speaker salience salience-threshold)))))))

(define salience-speaker 
	(mem (lambda (salience salience-threshold) 
		(enumeration-query
		(define domain (uniform-draw '(bare danger distinct)))
		
		domain

		(equal? salience (apply multinomial (salience-L0 domain salience-threshold)))))))

(define salience-L0 
	(mem (lambda (domain salience-threshold) 
		(enumeration-query
		(define salience (salience-prior 10 domain))
		salience
		(> salience salience-threshold)))))



(define L1 
	(mem (lambda (utterance domain)
		(enumeration-query
			(define prevalence (prevalence-prior domain))
			(define salience (salience-prior (nearest-soft prevalence) domain))
;			(define valence (flip))
;			(define valence true)
			(define prevalence-threshold (theta-prior))
			(define salience-threshold (salience-theta-prior))

;			(define theta2 theta1)
			(define qud (qud-prior))
;			(define qud "sp")
			(define val ((qud-fn qud) prevalence salience))

			(list prevalence salience)
			;val
			;qud

			(equal? (list utterance domain)
				(apply multinomial (S1 val qud prevalence-threshold salience-threshold)))))))

(define S1
	(mem (lambda (val qud prevalence-threshold salience-threshold)
		(enumeration-query
		;	(define utterance (true-false))
			(define utterance (true-false))
			;(define x (display utterance))
			(define domain (uniform-draw '(bare danger distinct)))

			(list utterance domain)

;			true))))
			(equal? val (apply multinomial (L0 utterance qud prevalence-threshold salience-threshold domain)))))))

(define L0
	(mem (lambda (utterance qud prevalence-threshold salience-threshold domain)
		(enumeration-query
			(define prevalence (prevalence-prior domain))
			(define salience (salience-prior (nearest-soft prevalence) domain))
			;(define salience (flip))
;			(define valence true)

			((qud-fn qud) prevalence salience)

			(meaning utterance prevalence salience prevalence-threshold salience-threshold qud)))))


(define expectation (lambda (output)
	(sum (map (lambda (lst) (* (first lst) (second lst))) (zip (first output) (second output))))))



(define qud-set (list "p" "s"))
;(define (qud-prior) (uniform-draw qud-set))
(define (qud-prior) (multinomial qud-set '(1 1)))
;(define (qud-prior) (uniform-draw (list 's 's)))

(define (qud-fn qud)
	(case qud
		(("p") (lambda (prevalence salience) prevalence))
		(("s") (lambda (prevalence salience) salience))
		(("sp") (lambda (prevalence salience) (list prevalence salience)))
		(else "error")
		)
	)


(define (prevalence-prior) 
  (multinomial '(0 10 30 50 70 90 100)
	  		   '(564 155 30 30 6 15 54)))


(define simple-subject
	(mem (lambda (words qud)
		(enumeration-query
			(define prevalence (prevalence-prior))
			(define salience (multinomial '(1 2 3) 
										  '(1 1 1)))
;			(define qud (qud-prior))
			(define val ((qud-fn qud) prevalence salience))

			;val	
			(list prevalence salience)	
		

			;(equal? words ((qud-fn qud) prevalence salience))
			(<= words ((qud-fn qud) prevalence salience))

			))))
;			val

			; (and (<= prevalence-word prevalence)
			; 	 (= salience-word salience))))))

(define experimenter
	(mem (lambda (prevalence-word salience-word)
		(enumeration-query
			;(define utterance (true-false))
			;(define prevalence (uniform-draw  '(0 10 30 50 70 90 100)))
			;(define salience (uniform-draw '(1 2 3)))
			(define qud (qud-prior))
			(define words ((qud-fn qud) prevalence-word salience-word))

			qud

			(equal? (list prevalence-word salience-word)
					;words
					(apply multinomial (simple-subject words qud)))))))


(define subject
	(mem (lambda (prevalence-word salience-word)
		(enumeration-query

			(define prevalence (prevalence-prior))
			(define salience (multinomial '(1 2 3) 
										  '(1 1 1)))
			(define utterance (true-false))
;			(define salience (apply multinomial (salience-listener domain)))
;			(define salience (salience-prior (nearest-soft prevalence) domain))
			(define qud (qud-prior))
			(define val ((qud-fn qud) prevalence salience))

			;utterance
			qud

			(and (equal? (list prevalence-word salience-word) 
					(apply multinomial (experimenter qud val)))
				 ;(equal? val 
				; 	(apply multinomial (pragmatic-listener utterance qud)))

			)))))

(define pragmatic-listener 
	(mem (lambda (utterance qud)
		(enumeration-query

			(define prevalence (prevalence-prior))
			(define salience (multinomial '(1 2 3) 
										  '(1 1 1)))
			(define prev-theta (theta-prior))
			(define sal-theta (uniform-draw '(0 1 2)))

			;(define prevalence-threshold (theta-prior))
			;(define salience-threshold (salience-theta-prior))

;			(define theta2 theta1)
			;(define qud (qud-prior))
;			(define qud "sp")
			(define val ((qud-fn qud) prevalence salience))

			;(list prevalence salience)
			val
			;qud

			(equal? utterance
				(apply multinomial 
					(speaker val qud prev-theta sal-theta)))

			))))

(define speaker
	(mem (lambda (val qud prev-theta sal-theta)
		(enumeration-query
		;	(define utterance (true-false))
			(define utterance (true-false))
			;(define x (display utterance))
			;(define domain (uniform-draw '(bare danger distinct)))
			utterance
;			true))))

			(equal? val 
				(apply multinomial 
					(literal-listener utterance qud prev-theta sal-theta)))))))

(define literal-listener
	(mem (lambda (utterance qud prev-theta sal-theta)
		(enumeration-query
			(define prevalence (prevalence-prior))
			(define salience (multinomial '(1 2 3) 
										  '(1 1 1)))

			((qud-fn qud) prevalence salience)

			
			(if (equal? qud "s")
				(if (equal? utterance "generic")
					(> salience sal-theta)
					(<= salience sal-theta))
				(if (equal? utterance "generic")
					(> prevalence prev-theta)
					(<= prevalence prev-theta))
				)
			))))


;(define domain "danger")
;(subject "low-prev" "med-sal")
(experimenter 30 3)
;(pragmatic-listener "generic" "p")
;(enumeration-query (define prev (prevalence-prior)) prev (> prev 0))
;(L0 100 "s" 0 0 "danger")
;(marginalize (S1 90 "s" 0 0))
;(marginalize (L1 "generic" "bare"))
;(state-prior domain)

;(S2 10 "bare")
;(enumeration-query (define x (salience-prior 10 "danger")) x)
;(salience-listener "distinct")
;(marginalize (L0 "generic" "ps" 10 10 "bare"))


; (define bare-tc (map 
; 	(lambda (x) (expectation (subject x "bare")))
; (list 10 30 50 70 90)))

; (define danger-tc (map 
; 	(lambda (x) (expectation (subject x "danger")))
; (list 10 30 50 70 90)))

; (define distinct-tc (map 
; 	(lambda (x) (expectation (subject x "distinct")))
; (list 10 30 50 70 90)))

; (display "bare truth conditions")
; (display bare-tc)
; (display "danger truth conditions")
; (display danger-tc)
; (display "distinct truth conditions")
; (display distinct-tc)
