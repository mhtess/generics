// webppl generics.wppl --require-js ./simpleCSV 


// load experimental data

var dfilepath = "/Users/mht/Documents/research/generics/cbg2010-replication/data/";
var dfile = dfilepath + "cbgR-exp9-trials.csv";
var dfile2 = dfilepath + "cbgR-exp12-trials.csv";

var tcData = simpleCSV.readCSV(dfile).data;
var ipData = simpleCSV.readCSV(dfile2).data;



var isTask = function(row, desired_task){
	var taskCol = tcData[0].indexOf('trial_type');
	return row[taskCol]==desired_task
}

var isQuantifier = function(row, desired_quantifier){
	var quantifierCol = tcData[0].indexOf('stim_determiner');
	return row[quantifierCol]==desired_quantifier
}

var isContext = function(row, desired_context){
	var contextCol = tcData[0].indexOf('stim_type');
	return row[contextCol]==desired_context
}

//isTask(tcData[1],'truth_conditions')
var filterByTaskContextQuantifier = function(dataArray, task, context, quantifier){
	return filter(function(item){
			return (isTask(item,task) & isContext(item,context) & isQuantifier(item,quantifier));
			}, dataArray)
};

filterByTaskContextQuantifier(tcData, 'truth_conditions', 'bare', 'generic')



// var statePrior = function() {
//   var prevalence = randomInteger(11) // random integer between 0 - 10, 
//   return prevalence
// }

// var thetaPrior = function() {
//   var threshold = randomInteger(10)
//   return threshold
// }

// var utterancePrior = function() {
//   var utterances = ["generic is true",
//                     "generic is false"]
//  // var utterances = ["generic is true",
//   //                  "mu"]                    
//   var i = randomInteger(utterances.length)
//   return utterances[i]
// }

// var meaning = function(utt,state, theta) {
//   return utt=="generic is true"? state>theta :
//          utt=="generic is false"? state<=theta :
//          true
// }

// var listener0 = cache(function(utterance, theta) {
//   Enumerate(function(){
//     var state = statePrior()
//     var m = meaning(utterance, state, theta)
//     factor(m?0:-Infinity)
//     return state
//   })
// })

// var speaker1 = cache(function(state, theta) {
//   Enumerate(function(){
//     var utterance = utterancePrior()
//     var L0 = listener0(utterance, theta)
//     factor(L0.score([],state))
//     return utterance
//   })
// })

// var listener1 = function(utterance) {
//   Enumerate(function(){
//     var state = statePrior()
//     var theta = thetaPrior()
//     var S1 = speaker1(state, theta)
//     factor(S1.score([],utterance))
//     return state
//   })
// }

// listener1("generic is true")
