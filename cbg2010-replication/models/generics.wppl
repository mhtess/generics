// webppl generics.wppl --require-js ./utils 

// mht's helper functions

// load experimental data
// var allData = utils.readInBothTCIPDataSets()
// var truthData = allData[0]
// var impliedData = allData[1]

// empirical prior data

// 5 free response (n=100)
// var prevelancePrior = {
// 	"bare": [465,87,220,33,26,40,20,14,20,10,65],
// 	"danger-distinct":[633,49,144,11,10,17,10,2,10,3,111],
// 	"nondistinctive":[384,85,252,31,30,63,14,10,26,6,99]
// }
// 10 free response (n=40)
// var prevelancePrior = {
// 	"bare": [448,157,199,59,59,80,38,33,26,15,68],
// 	"danger-distinct":[690,159,94,24,21,39,21,12,26,14,127],
// 	"nondistinctive":[342,144,246,60,68,93,50,15,45,24,95]
// }

// var prevelancePrior = {
//        "have spots": [151, 24, 36, 14,  8,  19,  4,  2, 10,  3,  29],
//        "have wings": [206,  1,  1, 1, 1,   1, 1, 1,  3,  5,  83],
//        "have manes": [260,  6,  2,  4,  1,  18,  1, 1, 1, 1,   8],
//        "lay eggs": [161,  1,  6, 1,  2,  56,  5,  2,  4, 1,  63],
//  "attack swimmers": [258,  9, 9,  3, 1,   2, 1,  1, 1,  3,  15],
//  "carry malaria": [260, 15, 11, 1,  3,   3,  2,  2,  1, 1,   3],
//          "are male":  [12, 1,  8,  9, 24, 219, 17,  3,  3,  3,   2],
//        "are female":  [1, 13,  3,  2, 21, 215, 28, 10,  6, 1, 2]
// }


// Sharks attack swimmers = 31
// Moquitos carry malaria = 30
// Lions have meanes = 57
// Leopards have spots = 93
// Ducks have windg = 92
// Birds lay eggs = 78



// var elicitedPrior = {
// 	"have spots" : {"leopards": 9},
// 	"lay eggs": {"ducks": 7},
// 	"have wings": {"birds": 9,
// 					"lions":1},
// 	"have manes": {"lions": 5},
// 	"carry malaria":{"mosquitos":3},
// 	"attack swimmers":{"sharks":3},
// 	"are female":{"ducks":5},
// 	"are male": {"ducks":5,
// 				"lions":5}
// }


// var truthJudgments = {
// 	"leopards have spots": 2.17,
// 	"birds have wings":2.63,
// 	"lions have manes":1.46,
// 	"ducks lay eggs":2.04,
// 	"mosquitos carry malaria":1.63,
// 	"sharks attack swimmers":1.5, // not in data set, taking mean of "striking"
// 	"lions are male":-0.04,
// 	"ducks are female":-0.58,
// 	"lions have wings":-2.5 // made up
// }

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var marginalize = function(myERP, index){
  Enumerate(function(){
    var x = sample(myERP)
    return x[index]
  })
}

var subset = function(df, field, value){
	return filter(function(d){
		return (d[field]==value)
	},df)
}

var bootstrap = function(lst){
	return _.flatten(repeat(_.size(lst), function(x){return _.sample(lst,1)}))
}



var writeERP = function(myERP){
  return map(function(val){
  	return [val, Math.exp(myERP.score([],val))]
  },myERP.support())
}

var prevelancePrior = utils.readInPrevalencePrior()
var truthJudgments = utils.readTruthJudgements()


var elicitedPrior = {
	"have spots" : {"leopards":9.9,
					"kangaroos":0.1},
	"lay eggs": {"robins": 7,
					"sharks":2,
					"lions":0.1},
	"have wings": {"ducks": 9.9,
					"leopards":0.1},
	"have manes": {"lions": 5,
						"sharks":0.1},
	"have pouches":{"kangaroos":7,
					"tigers": 0.1},
	"carry malaria":{"mosquitos":4,
					"robins":0.1},
	"attacks swimmers":{"sharks":4,
						"mosquitos":2},
	"are female":{"ducks":5,
					'robins':5},
	"are male": {"ducks":5,
				"lions":5},
	"are full-grown":{"sharks":6,
						"swans":6},
	"are juvenile":{"sharks":3,
					"leopards":3},
	"are red": {"cardinals":8},
	"are white": {"swans":7,
					"sharks":3},
	"carry lyme disease":{"ticks":5},
	"eat people":{"tigers":3},
	"have beautiful feathers":{"peacocks":9},

	"dont carry malaria":{"mosquitos":6},
	"dont attacks swimmers":{"sharks":6},
	"dont carry lyme disease":{"ticks":5},
	"dont eat people":{"tigers":7},
	"dont have beautiful feathers":{"peacocks":1}
}



// var truthJudgments = {
// 	"leopards have spots": 2.17,
// 	"birds have wings":2.63,
// 	"lions have manes":1.46,
// 	"ducks lay eggs":2.04,
// 	"mosquitos carry malaria":1.63,
// 	"sharks attack swimmers":1.5, // not in data set, taking mean of "striking"
// 	"lions are male":-0.04,
// 	"ducks are female":-0.58,
// 	"lions have wings":-2.5 // made up
// }



var getBinaryData = function(sentence){

	// from Prasada et al. 2013
	// out of a 7 pt scale centered at 0

	var percent = ((truthJudgments[sentence]+3)/6)

	var n = 25 // approximate from Prasada et al. 2013

	return utils.fillArray("generic is true",Math.round(n*percent))
}

// 1 free response (n=30)
// var prevelancePrior = {
// 	"bare": [68,44,66,20,22,28,9,4,10,2,27],
// 	"danger-distinct":[126,44,25,8,10,16,9,6,12,3,41],
// 	"nondistinctive":[14,45,89,21,32,29,21,2,11,9,27]
// }

//var cognitiveModel = function(gamma, delta, domain, speakerOptimality, QUD, prevalence){
//var cognitiveModel = function(domain, speakerOptimality, QUD, prevalence){
var cognitiveModel = function(sentence, speakerOptimality,cost){

	// var discretizeBeta = function(gamma, delta, bins){
	// 	var shape_alpha = gamma * delta
	// 	var shape_beta = (1-gamma) * delta
	// 	var betaPDF = function(x){
	// 		return Math.pow(x,shape_alpha-1)*
	// 				Math.pow((1-x),shape_beta-1)
	// 	}
	// 	return map(betaPDF, bins)
	// }

	var parseGeneric = function(sentence){
		var attacksFunc = function(prop){
			var x = prop == 'attack swimmers.' ? 'attacks swimmers.' : 
					(prop == 'dont attack swimmers.') ? 'dont attacks swimmers.' : prop
			return x
		}

		var pieces = sentence.toLowerCase().split(' ');
		var kind = pieces[0];
		pieces.shift();
		var property = attacksFunc(pieces.join(' '))
		return [property.substring(0, property.length-1), kind]
	}

	var parsed = parseGeneric(sentence);
	var domain = parsed[0];
	var kind = parsed[1];
	var prevalence = elicitedPrior[domain][kind]

	//console.log('here')
	var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
//	var bins = [0.01,0.05,0.15,0.25,0.35,0.45,0.55,0.65,0.75,0.85,0.95]
	// var quintileProbs = discretizeBeta(gamma,delta,bins)

	var statePrior = function() {
//	  var prevalence = 
	  var prevalence = domain=='fbt'? 
	  	10*bins[discrete(quintileProbs)]:
	  	10*bins[discrete(prevelancePrior[domain])]

	  //console.log(prevalence)
	  return prevalence
	}

	var thetaPrior = function() {
	  var threshold = randomInteger(10)//something goes wonky if "generic is false" can never be false
	  return threshold
	}
	var numberUtterancePrior = function() {
	  // var utterances = ["generic is true",
	  //                   "generic is false"]

	  var utterances = map(function(x){return 10*x}, bins)
	 // var utterances = ["generic is true",
	  //                  "mu"]                    
	  var i = randomInteger(utterances.length)
	  return utterances[i]
	}
	var wordUtterancePrior = function() {
	   //var utterances = ["generic is true",
	   //                  "generic is false"]
	   //var utterances = ["some",
	    //                 "most"]
	 var utterances = ["generic is true",
	                   "mu"]        
	 var cst = [1,cost]       
	  return utterances[discrete(cst)]

	}

	var meaning = function(utt,state, theta) {
	  return utils.isNumber(utt) ? state == utt :
	  		utt=="generic is true"? state>theta :
	         utt=="generic is false"? state<=theta :
	         utt=="some is true"? state>0 :
	         utt=="some is false"? state==0 :
	         utt=='mu'? true:
	         utt=='some'? state>0:
	         utt=='most'? state>= 0.5:
	         utt=='all'? state == 1:
	         true
	}
	var listener0 = cache(function(utterance, theta) {
	  Enumerate(function(){
	    var state = statePrior()
	    var m = meaning(utterance, state, theta)
	    factor(m?0:-Infinity)
	    return state
	  })
	})

	var wordSpeaker1 = cache(function(state, theta) {
	  Enumerate(function(){
	    var utterance = wordUtterancePrior()
	    var L0 = listener0(utterance, theta)
	    factor(L0.score([],state))
	    return utterance
	  })
	})

	var wordListener1 = cache(function(utterance) {
	  Enumerate(function(){
	    var state = statePrior()
	    var theta = thetaPrior()
	    var S1 = wordSpeaker1(state, theta)
	    factor(speakerOptimality*S1.score([],utterance))
	    return state
//	    return theta
	  })
	})

	var numberSpeaker1 = cache(function(state, theta) {
	  Enumerate(function(){
	    var utterance = numberUtterancePrior()
	    var L0 = listener0(utterance, theta)
	    factor(L0.score([],state))
	    return utterance
	  })
	})

	var numberListener1 = cache(function(utterance) {
	  Enumerate(function(){
	    var state = statePrior()
	    var theta = thetaPrior()
	    var S1 = numberSpeaker1(state, theta)
	    factor(speakerOptimality*S1.score([],utterance))
	    return state
	  })
	})

	// var speaker2_impliedPrevalence = cache(function(WHATSUP){
	// 	Enumerate(function(){
	// 		var utterance = numberUtterancePrior()
	// 		var wL1 = wordListener1(WHATSUP)
	// 		var state = sample(wL1)

	// 		var nL1 = numberListener1(utterance)
	// 		factor(nL1.score([], state))
	// 		return utterance
	// 	})
	// })

	var speaker2_truthConditions = cache(function(prevalence){
		Enumerate(function(){
			var nL1 = numberListener1(prevalence)
			var state = sample(nL1)

			var utterance = wordUtterancePrior()
			var wL1 = wordListener1(utterance)

			 factor(wL1.score([], state))
			return utterance
		})
	})

	// return QUD == "truth" ? 
	// 		//normalize(raiseToPower(
	// 		speaker2(prevalence):
	// 		listener1("generic is true")

	//return speaker2_impliedPrevalence("generic is true")
	return speaker2_truthConditions(prevalence)
//	return wordListener1("generic is true")


//	return wordListener1("generic is true")
//	return listener1("generic is true")

//	return listener1("generic is true")
//	return speaker1(0.1,9)
//	return listener0("generic is true", 9)
}




//cognitiveModel(null, null, 'has spots', 1, null, 9)
//cognitiveModel(null, null, 'lays eggs', 1, null, 5)
//cognitiveModel(null, null, 'has wings', 1, null, 9)
//cognitiveModel(null, null, 'has manes', 1, null, 5)
//cognitiveModel(null, null, 'carries malaria', 1, null, 3)
//cognitiveModel(null, null, 'attack swimmers', 1, null, 3)
//cognitiveModel(null, null, 'is female', 1, null, 5)
//cognitiveModel(null, null, 'is male', 1, null, 5)


// var writeERP = function(myERP){
//   return map(
//           function(value){
//             value.concat(Math.exp(myERP.score([], value)))
//           },
// //          myERP.support([])
//           ["some"]
//           )
// }


// //cognitiveModel(0.0003,100,'danger-distinct',1,"truth",5)

// map(function(x)
// 	{return map(function(d)
// 		{return writeERP(cognitiveModel(0.0003,100,d,1,"truth",x))},
// 	["danger-distinct", "bare","nondistinctive"])},
// [1,3,5,7,9])
//cognitiveModel("mosquitos carry malaria",2)



// sum(map2(function(x,y){return (y*x)/sum(prevelancePrior["bare"])},
// 	prevelancePrior["bare"],
// 	[0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99])
// )

var dataAnalysis = function(){

		//var phiTC = sample(uniformERP, [0,1])
		//var phiIP = sample(uniformERP, [0,1])

		var speakerOptimality = uniform(0.99,1.01)
//		var speakerOptimality = 0.1+(randomInteger(20)/4)
//		var cost = (randomInteger(3)+1)/2
		var cost = 1
		//var speakerOptimalityIP = sample(uniformERP,[0,10])

		foreach(_.keys(truthJudgments),
				function(sentence){
					var predictionERP = cognitiveModel(sentence,speakerOptimality, cost)

					//console.log(sentence)
					var modelScore = function(modelERP, data){
						return sum(map(function(d){return modelERP.score([],d)},data))
					}
					//return modelScore(predictionERP, truthJudgments[sentence])
					factor(modelScore(predictionERP, truthJudgments[sentence]))

					query.add(sentence, Math.exp(predictionERP.score([], "generic is true")))
				}
			)

	//	return _.object(posteriorPredictive)
//		return [speakerOptimality, cost]
	//	return speakerOptimality
//		return _.object(posteriorPredictive)

		return query
}

//var tfbt = Enumerate(dataAnalysis)
var mhiter=100
var tfbt = HashMH(dataAnalysis,mhiter)
// //tfbt

//tfbt
// cognitiveModel("Tigers have pouches.",2,1)

//dataAnalysis()
//var output = utils.expectation(tfbt, _.keys(truthJudgments))
utils.erpWriter(tfbt, 'generics_truthJudge_3_rationality1_n100_hashmh'+mhiter+'.csv')
//output

// dataAnalysis()



// //console.log(output)
//output


//prevelancePrior["have pouches"]
//_.keys(truthJudgments)


// map(function(sentence){
// 	// return sentence},
// 		console.log(sentence)

// 	var preds = cognitiveModel(sentence,2)
// 	return Math.exp(preds.score([],"generic is true"))},
// ["leopards have spots",
// "robins lay eggs",
// "sharks lay eggs",
// "ducks have wings",
// "lions have wings",
// "lions have manes",
// "mosquitos carry malaria",
// "sharks attacks swimmers",
// "mosquitos attacks swimmers",
// "ducks are female",
// "ducks are male",
// "lions are male",
// "sharks are full-grown",
// "sharks are juvenile",
// "cardinals are red",
// "swans are white",
// "sharks are white",
// "ticks carry Lyme disease",
// "tigers eat people",
// "peacocks have beautiful feathers",
// "kangaroos have pouches",
// "lions have pouches",
// "mosquitos dont carry malaria",
// "sharks dont attacks swimmers",
// "ticks dont carry Lyme disease",
// "tigers dont eat people"
// ]
// )



 // cognitiveModel("robins lay eggs", 2)

//cognitiveModel("has spots", 1, "qud", elicitedPrior["has spots"]["leopards"])

// var tcPredictions = map2(function(prevalenceLevels,context){
// 	return map(function(prevlev){
// 		return cognitiveModel(0.3, 1, 1, "truth", prevlev/10)
// 	}, prevalenceLevels)
// }, prevalenceLevelsAllContexts, tcContexts)


// var ipPredictions = map(function(context){
// 		return cognitiveModel(0.3, 1, 1, "how many?", "generic is true")
// 	}, ipContexts)

// // map(function(x){
// // 	return map(function(y){
// // 		//return [y.support(), y.score()]
// // 		return [y.support(), y.score()]
// // 	}, x)
// // }, tcPredictions)

// //cognitiveModel(0.3,1,1,"truth",1)

// var data = [1,1,1,2,4,1,1,1,1,9]

// var modelScore = function(modelERP, data){
// 	return sum(map(function(d){return modelERP.score([],d)},data))
// }

// factor(modelScore(ipPredictions, allmydata))


// map(function(x){
// 	return [x.support(), x.score()]
// }
// 	,ipPredictions)