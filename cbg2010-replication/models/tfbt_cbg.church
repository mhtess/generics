; example call
;; church -a 'implied_prevalence,most,bare,100,10,3' tfbt_cbg.church

; church -a 'implied_prevalence,most,danger,10000,100,3' tfbt_cbg.church &
; church -a 'implied_prevalence,most,distinct,10000,100,3' tfbt_cbg.church &
; church -a 'implied_prevalence,most,irrelevant,10000,100,3' tfbt_cbg.church &
; church -a 'implied_prevalence,some,danger,10000,100,3' tfbt_cbg.church &
; church -a 'implied_prevalence,some,distinct,10000,100,3' tfbt_cbg.church &
; church -a 'implied_prevalence,some,irrelevant,10000,100,3' tfbt_cbg.church &

; time church -a 'truth_conditions,generic,bare,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,distinct,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,danger,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,irrelevant,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,some,bare,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,some,distinct,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,some,danger,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,some,irrelevant,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,most,bare,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,most,distinct,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,most,danger,1000,100,3' tfbt_cbg.church &
; time church -a 'truth_conditions,most,irrelevant,1000,100,3' tfbt_cbg.church &

; time church -a 'truth_conditions,generic,bare,1000,3,3,5' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,dangerdistinct,1000,3,3,5' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,nondistinctive,1000,3,3,5' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,bare,1000,3,3,4' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,distinct,1000,3,3,4' tfbt_cbg.church &
; time church -a 'truth_conditions,generic,irrelevant,1000,3,3,4' tfbt_cbg.church &


(define args (regexp_split argstring ","))

(define task (first args))
(define quantifier (second args))
(define context (third args))
(define mh_samples (fourth args))
(define mh_lag (fifth args))
(define alpha (sixth args))
(define expnum (seventh args))

(define tasks '(how-many? true?)) ;; 1-to-1 map between QUD -- task

(define QUD (lambda (task quantifier)
              (case task
                    (('implied_prevalence) 'how-many)
                    (('truth_conditions) quantifier))))

(define uniform-score (lambda (lowerbound upperbound)
                        (- 0 (log (- upperbound lowerbound))))) ;;assuming values are in the range

(define all-true (lambda (lst) (apply and lst)))

(define string->boolean (lambda (str)
                          (equal? str 'True)))

(define data-path '/Users/mht/Documents/research/generics/cbg2010-replication/data/)
;(define data-path '/home/mht/generics/cbg2010-replication/data/)

;(define data-file (string-append data-path 'cbgR-exp1_exp3_anonymized-trials.csv))
;(define data-file (string-append data-path 'cbgR-exp4_anonymized-trials.csv))
(define data-file (string-append data-path (string-append 'cbgR-exp expnum '_anonymized-trials.csv)))

(define alldata (read-csv data-file))

(define task? (lambda (x) (equal? (fourth x) task)))
(define quantifier? (lambda (x) (equal? (seventh x) quantifier)))
(define context? (lambda (x) (equal? (fifth x) context)))
; (define stimulus-prevlevel? (lambda (lst target) (equal? 
;                                                   (string->number (last (but-last (but-last (but-last lst)))))
;                                                   target)))

(define stimulus-prevlevel? (lambda (lst target) (equal? 
                                                  (string->number (last (but-last (but-last lst))))
                                                  target)))

(define data-subset (filter 
                     (lambda (x) (and (task? x) (quantifier? x) (context? x))) 
                     alldata))

(define query-data (map (lambda (x) (last (but-last x))) data-subset))
;(define evidence-data (map (lambda (x) (string->number (last (but-last (but-last (but-last x)))))) data-subset))
(define evidence-data (map (lambda (x) (string->number (last (but-last (but-last x))))) data-subset))

(define sorted-truthcond-data
  (map 
   (lambda (y) 
     (map 
      (lambda (z) (string->boolean (last (but-last z))))
          (filter 
            (lambda (x) (stimulus-prevlevel? x y))
            data-subset)))
    (sort (unique evidence-data))))

(define simplified-data
  (case task
        (('implied_prevalence) (map (lambda (x) (string->number x)) query-data))
        (('truth_conditions) (map (lambda (x) (string->boolean x)) query-data))))

;  (map (lambda (x) (string->number x)) query-data))
;  (map (lambda (x) (round (/ (string->number x) 10))) prevalence-data)) ; round for conditioning on discrete data

; (define super-simplified-data
;   (repeat 20 (lambda () (uniform-draw simplified-data))))

;; background
(define (state-prior) (uniform-draw '(0 10 20 30 40 50 60 70 80 90 100)))

(define (all state threshold) (= 100 state))
(define (relaxed-all state threshold) (<= 90 state))

(define (some state some-threshold) (< some-threshold state))
(define (none state some-threshold) (>= some-threshold state))

(define (most state most-threshold) (< most-threshold state))
(define (anti-most state most-threshold) (>= most-threshold state))

(define (generic state generic-threshold) (< generic-threshold state))
(define (anti-generic state generic-threshold) (>= generic-threshold state))

(define (mu state dummy) true)
(define (how-many state dummy) state)

(define (raise-to-power dist alph)
  (list (first dist) (map (lambda (x) (pow x alph)) (second dist))))

(define (meaning word)
  (case word
        (('all) all)
        (('some) some)
        (('none) none)
        (('most) most)
        (('anti-most) anti-most)
        (('how-many) how-many)
        (('generic) generic)
        (('anti-generic) anti-generic)
        (('mu) mu)))


(define cognitive-model 
  (mem 
   (lambda (generic-theta most-theta some-theta QUD evidence)
     ;; input could be utterance (for listener / implied_prevalence)
     ;; or state (for speaker / truth_conditions)
     (define (theta-meaning word)
       (case word
             (('most-theta) most-theta)
             (('some-theta) some-theta)
             (('generic-theta) generic-theta)
             (('how-many-theta) 'null)))
     
     (define (theta words)
       (theta-meaning (string-append words '-theta)))



     (define listener1
       (mem (lambda (words) ;; listener1 doesn't do inference over theta
              (enumeration-query
               (define state (state-prior))
               (define QUD-val ((meaning QUD) state (theta QUD)))

               QUD-val

               (equal? words (apply multinomial (raise-to-power (speaker1 state) (string->number alpha))))))))

     (define speaker1
       (mem (lambda (state)
              (enumeration-query
               (define words
                 (case QUD
                       (('generic)  (uniform-draw (list 'generic 'anti-generic)))
                       (('some) (uniform-draw (list 'some 'none)))
                       (('most) (uniform-draw (list 'most 'anti-most)))
                       (('how-many) (uniform-draw (list 'most 'some 'generic)))))
               (define QUD-val ((meaning QUD) state (theta QUD)))

               words

               (equal? QUD-val
                       (apply multinomial (listener0 words)))))))

     (define listener0
       (mem (lambda (words) 
              (enumeration-query
               (define state (state-prior))
               (define QUD-val ((meaning QUD) state (theta QUD)))

               QUD-val

               ((meaning words) state (theta QUD))))))


     (if (equal? QUD 'how-many)
         (listener1 evidence)
         (speaker1 evidence)))))

(define tfbt-model
  ; (lambda (QUD utterance context)
  (lambda (QUD utterance)
    (mh-query 
     (string->number mh_samples)
     (string->number mh_lag)

     (define query-statement (lambda (utterance)
                               (case utterance
                                     (('most) (list phi most-theta))
                                     (('some) (list phi some-theta))
                                     (('generic) (list phi generic-theta)))))

     (define phi (uniform 0 1)) ;; guessing parameter

     (define generic-theta (if (equal? QUD 'generic) (uniform 0 100) 'null))
     (define some-theta (if (equal? QUD 'some) (uniform 0 100) 'null))
     (define most-theta (if (equal? QUD 'most) (uniform 0 100) 'null))

     (define alt-words
       (case QUD
             (('generic)  (list 'generic 'anti-generic))
             (('some) (list 'some 'none))
             (('most) (list 'most 'anti-most))
             (('how-many) (list 'most 'some 'generic))))
     ; (define model-predictions
     ;   (cognitive-model generic-theta most-theta some-theta QUD evidence))
     ; for truth_conditions task, get model-predictions for each of the prevalence levels


     (define model-predictions
       (map 
        (lambda (evidence) (cognitive-model generic-theta most-theta some-theta QUD evidence))
        (sort (unique evidence-data))))

    ; (display model-predictions)

     ;; compute the score for each data point, and sum then together
     (define scores
       (lambda (truthcond-byprev modelpred-byprev)
         (let* ([data-as-quantifier (map (lambda (x) (if x (first alt-words)
                                                         (second alt-words))) truthcond-byprev)]
                [match (lambda (x) (position (first modelpred-byprev) x))]
                [prob (lambda (x) (if (= (match x) -1) 0
                                      (list-ref (second modelpred-byprev) (match x))))]
                [score-marginalized-phi (lambda (x) 
                                          (log (abs (+ (- (prob x) 0.5) (/ (- 1 phi) 2)))))])
           (sum (map score-marginalized-phi data-as-quantifier)))))

     (define dummyvar-for-factoring
       (factor (sum (map scores sorted-truthcond-data model-predictions))))

     (query-statement utterance)

     true)))

;; truth conditions task: compute mean acceptance rate at each prevalence level
;(map (lambda (x) (mean (map boolean->number x))) sorted-truthcond-data)

(define samples (transpose (list (tfbt-model (QUD task quantifier) quantifier))))

(define output-path '/Users/mht/Documents/research/generics/cbg2010-replication/models/bayesian_analysis/)


(define output-file-name (string-append  output-path 'post_wPhi_exp expnum context '_ quantifier '_ task 
   '_mh mh_samples '_ mh_lag '_alpha alpha '.csv))
 (write-csv samples output-file-name)

 (define complete? 'complete)
 complete?




;(cognitive-model 3 5 0 'how-many 'most)
;(length simplified-data)
;(length simplified-data)
;super-simplified-data
;; cbg analysis
; (define inner-product (lambda (lst)
;   (sum (map (lambda (x y) (* x y)) (first lst) (second lst)))))

; (define normalize (lambda (lst)
;   (map (lambda (x) (/ x (sum lst))) lst)))

; (define (gen-probs model-preds) 
;   (let ([gen-pos (map (lambda (lst) (position (first lst) utterance)) model-preds)])
;     (map (lambda (y i) (if (< i 0) 0 (list-ref (second y) i))) model-preds gen-pos)))


