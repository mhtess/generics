// time webppl naturalJudgments.wppl --require mht


var priors = json.read("../../models/data/realkinds-priors-n57-bootstrapped-1000.json")

var bootstrapIndices = RandomInteger({n:1000})

var Truthdata = mht.readCSV("../../models/data/real-kinds-truth-1-trials-formatted.csv").data
var df_truth0 = dataFrame(Truthdata.slice(0, Truthdata.length - 1), ["negation"] )

var responseDictionary = {
	"agree-key":1,
	"disagree-key":0
}

var df_truth = map(function(d){ 
	return _.extend(d, {"binaryResponse": responseDictionary[d.response]})
},df_truth0)

var properties = _.uniq(_.pluck(df_truth,"Property"))

var prevalenceERPobject = _.object(map(function(p){
	var categories = _.uniq(_.pluck(subset(df_truth, "Property", p), "Category"))
	// console.log('loading prevalence ERP for ' + p)
	return [p, _.object(map(function(k){
			var fpath = "../../models/prevalence_results/prevalence_"+p+"_"+k+".csv"
			var df = readQueryERP(fpath)
			return [k, df]
		}, categories))]
},properties))

// df_truth

// sample(prevalenceERPobject["have beautiful feathers"]["Peacocks"])
// var bootstrapIndices = Infer(,function(){

// })
// var x = [_.sample(_.uniq(_.pluck(priors, "i"))), _.sample(_.uniq(_.pluck(priors, "i")))]
// x
// priors


var model = function(){

	var s1_optimality = sample(UniformDrift({a:0,b:20,r:2})
	var s2_optimality = sample(UniformDrift({a:0,b:5,r:0.5}))
	var cost = 1
	// var phi = uniform(0,1)
	var phi = 0.001

	var bootstrap_index = bootstrapIndices.sample() + 1
	var bs_prior = subset(priors, "i", bootstrap_index)
	var p = "are red"


	foreach(properties,
		function(p){

			var propertyData = subset(df_truth, "Property", property)
			var categories = _.uniq(_.pluck(propertyData, "Category"))

			var property_prior = subset(bs_prior, "Property", p)
			var prior = Categorical({
				vs: _.pluck(property_prior,"bin"),
				ps: _.pluck(property_prior, "n")})

			foreach(categories,
				function(k){
					var categoryData = subset(propertyData, "Category", k)
					
					var prevalencePropCat = prevalenceERPobject[property][k]
					var pfk = sample(prevalencePropCat)

					var responseData = _.pluck(categoryData, "binaryResponse")

			     	var predictionERP = speaker2(prevalence, prior, speakerOptimality)

			     	//note, there must be at least a tiny amount of noise, otherwise for the items with 0 prevalence, the model crashes
			     	var linkedERP = guessingLink(predictionERP, phi)
					
					var scr = sum(map(function(d) {
								    return linkedERP.score([], responseDictionary[d])
										}, responseData))
					// console.log(property + k + scr)
					factor(scr)

					query.add(["generic_linked",property, k, "0"], 
								Math.exp(linkedERP.score([], "generic is true")))

					// query.add(["generic_pred",property, k, "0"], 
					// 			Math.exp(predictionERP.score([], "generic is true")))


					// query.add(["prevalence",property, k, "0"], prevalence)

					// })
				})

			// to get out posterior Thetas / States for Figures 1, 3
			// var thetaPosterior = genericListener1withTheta(prior, speakerOptimality)
			// var thetaPosterior = marginalizeERP(listenerPosterior, "theta")
			// var statePosterior = marginalizeERP(listenerPosterior, "state")

			// foreach(thetaPosterior.support(),
			// 	function(x){query.add(['statePosterior',property,x,"0"], Math.exp(thetaPosterior.score([], x)))}
			// 	)


			// foreach(_.zip(propertyrior, bins),
			// 	function(x){query.add(['prevalencePrior',property,x[1],"0"], x[0])}
			// 	)
		})
	query.add(["s1_optimality","na","na","na"], s1_optimality)
	query.add(["s2_optimality","na","na","na"], s2_optimality)
	return query
}


// var mhiter = 50000
// var burn = mhiter/2
// console.log('doing the full bayesian dance...')
// var tfbt = IncrementalMH(modelAnalysis,mhiter, {"verbose":true,
// 												"burnin":burn,
// 												verboseLag:mhiter/50}
// 												)
// console.log('FBT complete')


// var outfile = '../model-results/generics-truthJudgment-SOPTinS1_40-prior100-previter'+previter+
// 				'_prevprioriter'+prevprioriter+'-priord50Zero-n60_IncrMH'+
// 	mhiter+'_burn'+burn+'a.csv'

// naturalUtils.erpWriter(tfbt, outfile)
// console.log('wrote to... ' + outfile )


// // prevalenceERP
// // prevalenceERPobject["lay eggs"]["Sharks"]

// 	