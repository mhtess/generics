// time ~/webppl-infer/webppl asymmetry.wppl --require mht --require asymUtils 1

var start_index = mht.wpParseFloat(last(process.argv)) // load index as last command line index

var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var asymData = mht.readCSV("../data/novelGenerics-trials-medSplitAccidental.csv").data;

var df_asym = dataFrame(asymData.slice(0,asymData.length-1), ["response", "stim_prevalence"]);
var tasks = _.uniq(_.pluck(df_asym, "trial_type"));
var df_accepted = subset(df_asym, "trial_type", "truth_conditions");
var df_implied0 = subset(df_asym, "trial_type", "implied_prevalence");
var prevalenceLevels = _.uniq(_.pluck(df_accepted, "stim_prevalence"));
var items = _.uniq(_.pluck(df_implied0, "stim_property"));

var stim_types = _.uniq(_.pluck(df_accepted, "type"));
// var alignAgree = {"Agree":"generic is true",
// 				  "Disagree": "mu"}
var alignAgree = {"1":"generic is true",
				  "0": "mu"}

var avoidEnds = function(response){
    return response==0 ? 0.01 : response==1 ? 0.99 : response
}

var alignElicitation = function(number){
    return avoidEnds(Math.round(number*10)/10)
}

var df_implied = map(function(d){ 
	return _.extend(d, {"alignedResponse": alignElicitation(d.response) })
},df_implied0)


var questionDictionary = {
	"response0":"across",
	"response1":"within"
}

var samples = 10000

var priorERPobject = _.object(map(function(i){
	console.log('loading prior ERP for ' + i)
	return [i, _.object(map(function(dm){
			var fpath = "../../models/novel_priors/priors_results/priors"+
							i+"_"+questionDictionary[dm]+"_MH"+samples/1000+"k.csv"
			var df = readQueryERP(fpath)
			return [dm, df]
		}, ["response0", "response1"]))]
},stim_types))

// var tasks = ["implied_prevalence"];
// // items
var model = function(){

	var s1_optimality = sample(UniformDrift({a:0,b:20,r:2}))
	// var s2_optimality = sample(UniformDrift({a:0,b:5,r:0.5}))
	var s1_optimality_truth = sample(UniformDrift({a:0,b:20,r:2}))
	var s2_optimality_truth = sample(UniformDrift({a:0,b:5,r:0.5}))

	foreach(tasks, function(task){
			// foreach(conditions, 
			foreach(stim_types, function(item){

				var prior_across = sample(priorERPobject[item]["response0"])
				var prior_within = sample(priorERPobject[item]["response1"])

				// var theta = beta({a:prior_across.a, b:prior_across.b})

				var prior = Infer({method:"enumerate"}, function(){
					var theta =  bins[discrete(map(function(bin) { 
								return Math.exp(Beta({a:prior_across.a,b:prior_across.b}).score(bin)) 
							}, bins ))]
					return flip(theta) ? 
							bins[discrete(map(function(bin) { 
								return Math.exp(Beta({a:prior_within.a,b:prior_within.b}).score(bin)) 
							}, bins ))] :
							0
				})

				if (task=="truth_conditions") {

					var df_accept_type = subset(df_accepted, "type", item);

					foreach(prevalenceLevels, function(prevalence){

						var df_accepted_prev = _.pluck(subset(df_accept_type,"stim_prevalence", prevalence), "response")

						var S2 = speaker2(prevalence/100, prior, s1_optimality_truth, s2_optimality_truth)
						// console.log(df_accepted_prev)
						var scrs = map(function(response) { return S2.score(response) }, df_accepted_prev)
						// console.log("tc = " + sum(scrs))
						factor(sum(scrs))

						query.add([task,item,prevalence], expectation(S2))
					})
				
				} else {

					var df_implied_prev = _.pluck(subset(df_implied, "type", item), "alignedResponse")
					// console.log(df_implied_prev)
					var L1 = listener1("generic is true", prior, s1_optimality)
					var scrs = map(function(d) { return L1.score(d) }, df_implied_prev)
					// console.log("ip = " + sum(scrs))
					factor(sum(scrs))

					query.add([task, item, "na"], expectation(L1))
				}
		})
	})

	query.add(["s1_optimality","na","na"], s1_optimality)
	query.add(["s1_optimality_truth","na","na"], s1_optimality_truth)
	query.add(["s2_optimality_truth","na","na"], s2_optimality_truth)

	return query
}

var mhiter = 1000
var burn = mhiter/2
console.log('before infer')
var tfbt = Infer({method: "incrementalMH", samples: mhiter, burn: burn, verbose: true, verboseLag: 100}, model)
var header = "Parameter,Property,Value"
// var outfile = '../model-results/full-bayesian/novel-interpretations-so1-_IncrMH'+ mhiter+'_burn'+burn+'_c'+start_index+'.csv'
var outfile = '../model-results/full-bayesian/asymmetry-so1x2_s2-integrateTheta_IncrMH'+ mhiter+'_burn'+burn+'_c'+start_index+'.csv'
mht.erpWriter(tfbt, outfile, header)
console.log('wrote to... ' + outfile )

// model()


