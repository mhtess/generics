// time webppl asymmetry.wppl --require asymUtils


var asymData = asymUtils.readCSV(fpath+"data/novelGenerics-trials-medSplitAccidental.csv").data

var df_asym = dataFrame(asymData.slice(0,asymData.length-1))
var tasks = _.uniq(_.pluck(df_asym, "trial_type"))
var df_accepted = subset(df_asym, "trial_type", "truth_conditions")
var df_implied = subset(df_asym, "trial_type", "implied_prevalence")
var prevalenceLevels = _.uniq(_.pluck(df_accepted, "stim_prevalence"))

// var alignAgree = {"Agree":"generic is true",
// 				  "Disagree": "mu"}
var alignAgree = {"1":"generic is true",
				  "0": "mu"}

var prioriter = 20000

// console.log('inferring prevalence priors...')
var priorERP = IncrementalMH(priorModel, prioriter, {"verbose":"true", "burnin": prioriter/2})

// console.log('prior inferred from prior elicitation data')

var priorERPobject = _.object(map(function(c){
	return [c, marginalizeERP(priorERP, c)]
// }, conditions))
}, items))

var tasks = ["truth_conditions"]

var dataModel = function(){
	
	var phi = uniform(0,1)
	// var softmax = uniform(0,5)
	// var phi = 0
	foreach(tasks,
		function(task){
			// console.log(task)

			var speakerOptimality = uniform(0,20)


			// foreach(conditions, 
			foreach(items, 
				function(type){
					// console.log(type)

					var priorProperty_ERP = priorERPobject[type]
					var prior = sample(priorProperty_ERP)

					if (task=="truth_conditions") {

						var df_accept_type = subset(df_accepted, "type", type)

						foreach(prevalenceLevels,
							function(prevalence){

								var df_accepted_prev = _.pluck(subset(df_accept_type,"stim_prevalence", prevalence), "response")
								// console.log(prevalence)
								// var agreeERP = softmaxSpeaker(truthSpeaker2(prevalence/100, prior, speakerOptimality, 1), softmax)
								var agreeERP = truthSpeaker2(prevalence/100, prior, speakerOptimality, 1)
								var linkedERP = guessingLink(agreeERP, task, phi)

								var scr = reduce(function(response, memo) {
												    return memo + linkedERP.score([], alignAgree[response])
													}, 0, df_accepted_prev)
								// console.log(scr)
								factor(scr)

								query.add([task,type,prevalence],Math.exp(linkedERP.score([], "generic is true")))
							}
						)
					
					} else {

						// var df_implied_type = subset(df_implied, "type", type)
						var df_implied_type = subset(df_implied, "stim_property", type)
						var df_implied_prev = _.pluck(df_implied_type, "response")

						var impliedERP = numberSpeaker2("generic is true", prior, speakerOptimality, 1)
						var linkedERP = guessingLink(impliedERP, task, phi)


						var scr = reduce(function(response, memo) {
										    return memo + linkedERP.score([], alignElicitation(response))
											}, 0, df_implied_prev)
						// console.log(scr)
						factor(scr)


						// foreach(linkedERP.support(),
						// 	function(x){query.add(['statePosterior',type,x], Math.exp(linkedERP.score([], x)))}
						// 	)


						query.add([task,type,"NA"], expectation(linkedERP))

					}

				})

			query.add([task, "speakerOptimality", "NA"], speakerOptimality)
			// query.add([task, "phi","NA"], phi)

		})
	query.add(["NA", "phi","NA"], phi)
	// query.add(["NA", "softmax","NA"], softmax)

	return query

}

// var type = "accidental_low"
// var prior = sample(priorERPobject[type])
// var df_accept_type = subset(df_accepted, "type", type)
// var prevalence = 30

// var df_accepted_prev = _.pluck(subset(df_accept_type,"stim_prevalence", prevalence), "response")
// var df_implied_type = subset(df_implied, "type", type)
// var df_implied_prev = _.pluck(df_implied_type, "response")

// // df_implied_prev
// map(alignElicitation,df_implied_prev)
// guessingLink(truthSpeaker2(0.3, prior, 2, 1), "truth_conditions", 0.2)

// // df_accepted_prev
var mhiter = 20000
var resultsERP = IncrementalMH(dataModel, mhiter,  {"verbose":"true", "burnin": mhiter/2})
// var outfile = "../model-results/generics-implied_truth-softmax-priord50iter"+prioriter+'_mh'+mhiter+'a.csv'
var outfile = "../model-results/generics-truth-byItem-phi-priord50iter"+prioriter+'_mh'+mhiter+'b.csv'
console.log('inference complete')
asymUtils.erpWriter(resultsERP, outfile)
console.log("ouput written to " +outfile)

// _.uniq(_.pluck(df_asym, "stim_property"))
// items

