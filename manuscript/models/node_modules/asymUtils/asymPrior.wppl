// webppl asymPrior.wppl --require-js ./asymUtils.js 

var fpath = "/Users/mht/Documents/research/generics/manuscript/"
var Priordata = asymUtils.readCSV(fpath+"data/asymmetry-prior-4splitAccidental-trials.csv").data

var df = dataFrame(Priordata.slice(0,Priordata.length-1))
var conditions = _.uniq(_.pluck(df,"type"))
var guessing = 1/bins.length;

var priorModel = function(){

	var phi = uniform(0,1)

	foreach(conditions,
		function(c){

			var conditionData = subset(df, "type", c)

			var gamma_across = uniform(0,1)
			var delta_across = uniform(0,20)

			var discreteBetaProbsNormalized_across = normalize(discretizeBeta(gamma_across, delta_across))

			// discrete factoring
			var scr1 = reduce(function(dataPoint, memo) {
							    return memo + Math.log(
							    		(phi*guessing) + 
										((1-phi) * discreteBetaProbsNormalized_across[bins.indexOf(alignElicitation(dataPoint))])
									)
									
								}, 0, _.pluck(conditionData,"response0"))

			// continuous factoring
			// var scr1 = reduce(function(dataPoint, memo) {
			// 				    return memo + Math.log(
			// 				    					(phi*Math.exp(betaERP.score([1,1],avoidEnds(dataPoint))) +
			// 				    			 		(1-phi)* Math.exp(betaERP.score([
			// 														shape_alpha(gamma_across,delta_across),
			// 														shape_beta(gamma_across,delta_across)
			// 														], avoidEnds(dataPoint)))
			// 				    			 		))
			// 					}, 0, _.pluck(conditionData,"response0"))

			// console.log(scr1)
			factor(scr1)

			var gamma_within = uniform(0,1)
			var delta_within = uniform(0,20)

			var discreteBetaProbsNormalized_within = normalize(discretizeBeta(gamma_within, delta_within))

			//discrete factoring
			var scr2 = reduce(function(dataPoint, memo) {
							    return memo + Math.log(
							    		(phi*guessing) + 
										((1-phi) * discreteBetaProbsNormalized_within[bins.indexOf(alignElicitation(dataPoint))])
									)
									
								}, 0, _.pluck(conditionData,"response1"))

			// continuous factoring
			// var scr2 = reduce(function(dataPoint, memo) {
			// 		    return memo + Math.log(
			// 		    					(phi*Math.exp(betaERP.score([1,1],avoidEnds(dataPoint))) +
			// 		    			 		(1-phi)* Math.exp(betaERP.score([
			// 												shape_alpha(gamma_within,delta_within),
			// 												shape_beta(gamma_within,delta_within)
			// 												], avoidEnds(dataPoint)))
			// 		    			 		))
			// 		}, 0, _.pluck(conditionData,"response1"))

			// console.log(scr2)
			factor(scr2)


			// for doing just inference of asymPrior
			// query.add([c,'across','gamma'], gamma_across)
			// query.add([c,'across','delta'], delta_across)
			// query.add([c,'within','gamma'], gamma_within)
			// query.add([c,'within','delta'], delta_within)
			// var discretized_prevalence = discretizedPriorModel(gamma_across, delta_across, gamma_within, delta_within)
			// foreach(_.zip(discretized_prevalence, [0, 0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]),
			// 	function(x){query.add(['prevalencePrior',c,x[1]], x[0])}
			// 	)

			// for communication with asymmetry.wppl
			query.add(c, discretized_prevalence)


	})

	// query.add(["phi","na","na"], phi)

	return query
}



// var mhiter = 10000
// var outfile = "../model-results/generics-asymmetry-discprior-incrmh"+mhiter+".csv"
// console.log('inferring prior')
// var heirarchicalERP = IncrementalMH(priorModel, mhiter, {"verbose":true})
// asymUtils.erpWriter(heirarchicalERP, outfile)
// console.log("prior written to " +outfile)


