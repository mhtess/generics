// webppl FBT-hierarchicalPrior.wppl --require-js ./priorutils.js

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var marginalize = function(myERP, index){
  Enumerate(function(){
    var x = sample(myERP)
    return x[index]
  })
}

var subset = function(df, field, value){
	return filter(function(d){
		return (d[field]==value)
	},df)
}

var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}

var data = priorutils.readCSV("../../models/data/asymmetry-prior-4splitAccidental-trials.csv").data
//var Priordata = asymutils.readCSV("data/asymmetry-prior-4splitAccidental-trials.csv").data

var df = map(
	function(lst){
		return _.object(_.zip(data[0],lst))
	},
	data.slice(1))


var conditions = _.uniq(_.pluck(df,"type"))
var items = _.uniq(_.pluck(df,"stim_property"))
var responseTypes = ["response0","response1"]

var avoidEnds = function(response){
	return response==0 ? 0.01 : response==1 ? 0.99 : response
}

// by "condition" (part vs. color vs. vague vs. accidental)
var dataAnalysisModel = function(){

	foreach(conditions,
		function(c){

			var conditionData = subset(df, "type", c)

			foreach(responseTypes,
				function(r){

					var gamma = uniform(0,1)
					var delta = uniform(0,10)
					var responseData = _.pluck(conditionData,r)
					var scr = reduce(function(dataPoint, memo) {
									    return memo + betaERP.score([
											shape_alpha(gamma,delta),
											shape_beta(gamma,delta)
											], avoidEnds(dataPoint))
										}, 0, responseData)
					factor(scr)

					// query.add([c, r], [gamma, delta])
					query.add([c,r,'gamma'], gamma)
					query.add([c,r,'delta'], delta)

				}
			)
		}
	)
	return query
}


// by "item" (e.g. "broken feathers", "legs")

// var itemAnalysisModel = function(){

// 	foreach(items,
// 		function(i){

// 			var itemData = subset(df, "stim_property", i)

// 			foreach(responseTypes,
// 				function(r){

// 					var gamma = uniform(0,1)
// 					var delta = uniform(0,10)
// 					var responseData = _.pluck(itemData,r)
// 					var scr = reduce(function(dataPoint, memo) {
// 									    return memo + betaERP.score([
// 											shape_alpha(gamma,delta),
// 											shape_beta(gamma,delta)
// 											], avoidEnds(dataPoint))
// 										}, 0, responseData)
// 					factor(scr)

// 					query.add([i, r], [gamma, delta])
// 				}
// 			)
// 		}
// 	)
// 	return query
// }







var mhiter = 100
// var resultsERP = IncrementalMH(dataAnalysisModel, mhiter)
var resultsERP = HashMH(dataAnalysisModel, mhiter, {"burnin":75,
													"verbose":true})

//var outfile = "results/priors4_betas_byType_incrMH"+mhiter+".csv"
//var outfile = "results/priors4_betas_byType_incrMH"+mhiter+".csv"
var outfile = "results/priors4_betas_byType_hashMH"+mhiter+".csv"

priorutils.erpWriter(resultsERP,outfile)
console.log('printed '+ outfile)

// var resultsERP = HashMH(dataAnalysisModel, 100)
// resultsERP


// var writeReady = map(function(key){
// 		var m = marginalize(resultsERP, key)
// 		return [key, expectation(marginalize(m, 0)), expectation(marginalize(m, 1))]
// 	},
// 	_.keys(resultsERP.support()[0])
// )
// writeReady.unshift(["key","gamma","delta"])

// priorutils.writeCSV(writeReady, "results/expVal_betas_prior2_incrMH10k.csv")

// foreach(_.keys(resultsERP.support()[0]),
// 	function(key){
// 		var m = marginalize(resultsERP, key)
// 		console.log(key + ' gamma = ' + expectation(marginalize(m, 0)))
// 		console.log(key + ' delta = ' + expectation(marginalize(m, 1)))
// 	}
// )




