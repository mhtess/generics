// webppl prior.wppl --require-js ./asymutils.js 

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var marginalize = function(myERP, index){
  Enumerate(function(){
    var x = sample(myERP)
    return x[index]
  })
}

// var discretizeBeta = function(gamma, delta){
// 	var shape_alpha = gamma * delta
// 	var shape_beta = (1-gamma) * delta
// 	var betaPDF = function(x){
// 	  return Math.pow(x,shape_alpha-1)*
// 	      Math.pow((1-x),shape_beta-1)
// 	}
// 	return map(betaPDF, bins)
// }

var subset = function(df, field, value){
	return filter(function(d){
		return (d[field]==value)
	},df)
}

var bootstrap = function(lst){
	return _.flatten(repeat(_.size(lst), function(x){return _.sample(lst,1)}))
}

var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}

var Priordata0 = asymutils.readCSV("data/asymmetry-prior-4splitAccidental-trials.csv").data
var Priordata = Priordata0.slice(0, Priordata0.length-1)

var df0 = map(
	function(lst){
		return _.object(_.zip(Priordata[0],lst))
	},
	Priordata.slice(1))

var df = df0//bootstrap(df0)

var conditions = _.uniq(_.pluck(df,"type"))

var avoidEnds = function(response){
	return response==0 ? 0.01 : response==1 ? 0.99 : response
}


// var priorModel = function(){

// 	var phi = uniform(0,1)

// 	foreach(conditions,
// 		function(c){

// 			var conditionData = subset(df, "type", c)

// 			foreach(["response0","response1"],
// 				function(r){

// 					var gamma = uniform(0,1)
// 					var delta = uniform(0,10)

// 					var responseData = _.pluck(conditionData,r)
// 					// console.log(responseData)
// 					var scr = reduce(function(dataPoint, memo) {
// 									    return memo + Math.log(
// 									    					(phi*Math.exp(betaERP.score([1,1],avoidEnds(dataPoint))) +
// 									    			 		(1-phi)* Math.exp(betaERP.score([
// 																			shape_alpha(gamma,delta),
// 																			shape_beta(gamma,delta)
// 																			], avoidEnds(dataPoint)))
// 									    			 		))
// 										}, 0, responseData)

// 					factor(scr)
// 					// console.log(scr)

// 		//			query.add(r, [gamma, delta])
// 					query.add([c,r,'gamma'], gamma)
// 					query.add([c,r,'delta'], delta)
// 				}
// 			)

// 	})

// 	query.add(["na","na","phi"], phi)

// 	return query
// }


//   // var heirarchicalERP = IncrementalMH(function(){return priorModel(key)}, 1000)
// var mhiter = 50000
// var heirarchicalERP = IncrementalMH(priorModel, mhiter, {"verbose":true})
// var outfile = "results/generics-asym-prior-incrmh"+mhiter+".csv"

// // var outfile = "results/priorERP-incrmh1000_"+key+".csv"
// asymutils.erpWriter(heirarchicalERP, outfile)
// console.log("prior written to " +outfile)



// IncrementalMH(function(){return priorModel("vague")}, 1000)



var priorModel = function(c){

	var conditionData = subset(df, "type", c)

	foreach(["response0","response1"],
		function(r){

			var gamma = uniform(0,1)
			var delta = uniform(0,50)

			var responseData = _.pluck(conditionData,r)
			// console.log(responseData)
			var scr = reduce(function(dataPoint, memo) {
							    return memo + betaERP.score([
									shape_alpha(gamma,delta),
									shape_beta(gamma,delta)
									], avoidEnds(dataPoint))
								}, 0, responseData)

			factor(scr)
			// console.log(scr)

//			query.add(r, [gamma, delta])
			query.add([c,r,'gamma'], gamma)
			query.add([c,r,'delta'], delta)
		}
	)
	return query
}



// Priordata

// df

// // go from inferred beta parameters from prior elicitation, to a prevalence prior for lvrsa
// var getPriorERP = cache(function(condition){

// 	// do BDA on prior elicitation
// 	var heirarchicalERP = IncrementalMH(function(){return priorModel(condition)}, 1000)

// 	Enumerate(function(){

// 		var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

// 		// var kindDoesntHaveF_prevalence = 0.01
// 		var kindDoesntHaveF_prevalence = 0

		// var discretizeBeta = function(gamma, delta){
		// 	var shape_alpha = gamma * delta
		// 	var shape_beta = (1-gamma) * delta
		// 	var betaPDF = function(x){
		// 	  return Math.pow(x,shape_alpha-1)*
		// 	      Math.pow((1-x),shape_beta-1)
		// 	}
		// 	return map(betaPDF, bins)
		// }

// 		var s = sample(heirarchicalERP)

// 		// discretization occurs here
// 		var prevalencePrior = 
// 		Enumerate(function(){
// 			var kindHasF = flip(
// 							bins[discrete(
// 								discretizeBeta(
// 									s[condition+",response0,gamma"], 
// 									s[condition+',response0,delta']
// 								)
// 							)])

// 			var prevalenceGivenK = kindHasF ? bins[discrete(
// 								discretizeBeta(
// 									s[condition+",response1,gamma"], 
// 									s[condition+",response1,gamma"]
// 								)
// 							)] : kindDoesntHaveF_prevalence

// 				return prevalenceGivenK
// 			})


// 		return map(function(s){return Math.exp(prevalencePrior.score([],s))} , prevalencePrior.support())


// 	})
// })


// map(function(key){


// getPriorERP("vague")