// time webppl naturalPrevalence.wppl --require mht

var shape_alpha = function(g,d){return g * d}
var shape_beta = function(g,d){return (1-g) * d}

var avoidEnds = function(response){
	return response==0 ? 0.0001 : response==1 ? 0.9999 : response
}

var avoidUpperBound = function(response){
	return response==1 ? 0.99 : response
}

var alignPrevalence = function(number){
	return avoidUpperBound(Math.round(number*10)/10)
//	return avoidEnds(Math.round(number/5)/20)
}

var Priordata = mht.readCSV("data/real-kinds-prior-2-trials-formatted.csv").data
var Truthdata = mht.readCSV("data/real-kinds-truth-1-trials-formatted.csv").data

var df_prior0 = dataFrame(Priordata.slice(0, Priordata.length - 1), ["prevalence"] ) 
var df_truth = dataFrame(Truthdata.slice(0, Truthdata.length - 1), ["negation"] )

var df_prior = map(function(d){ 
	return _.extend(d, {"roundedPrevalence": avoidEnds(d.prevalence/100)})
},df_prior0)

var properties = _.uniq(_.pluck(df_prior,"Property"))



// var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,
// 				 0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var discretizeBeta = function(g, d){
	var shape_alpha =  g * d
	var shape_beta = (1-g) * d
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}

var header = "Property,Category,Prevalence,Probability"
var samples = 50000
var burn = samples/2

var inferopts = {method: 'MCMC', samples: samples, burn: burn, verbose:true}

var prevalenceModel = function(p, k){

	var prevalenceData = _.pluck(
		subset(
			subset(df_prior, 
				"Property", p), 
			"Category", k),
		"roundedPrevalence")

	var g = uniform(0,1)
	var d = uniform(0,50)
	var a = shape_alpha(g,d)
	var b = shape_beta(g,d)

	var scrs = map(function(d) {
		return Beta({a:a,b:b}).score(d)
	}, prevalenceData)

	factor(sum(scrs))

	var predictive = beta(a,b)

	query.add([p,k],[alignPrevalence(predictive)])

	return query

}


foreach(properties, function(p){
	var categories = _.uniq(_.pluck(subset(df_truth, "Property", p), "Category"))
	foreach(categories, function(k){
		var outfile = "prevalence_results/prevalence_"+p+"_"+k+".csv"
		var h0file = mht.openFile(outfile)
		mht.writeLine(h0file, header)
		var results = Infer(inferopts, function() { prevalenceModel(p, k) } )
		mht.writeERP(results, h0file)
		console.log(k + " / " + p +  " items written to file")
		mht.closeFile(h0file)		
	})
})



