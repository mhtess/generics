// time webppl natural-priors.wppl --require-js ./truthUtils.js --require-wppl ./natural-cases-prior.wppl 

// var discretizedPriorModel = function(g0, d0, g1, d1){
var discretizedPriorModel = function(hasF, g1, d1){

	var getProbsFromERP = function(myERP, orderedSupport){
		return map(function(s){
			Math.exp(myERP.score([], s))
		}, orderedSupport)
	}

	// var hasF = makeBetaBernoulli([shape_alpha(g0,d0), shape_beta(g0,d0)])()
	// var prevalence = hasF ? beta()
	var kindDoesntHaveF_prevalence = 0
	// var kindDoesntHaveF_prevalence = 0
	// discretization occurs here
	var prevalencePrior = 
		Enumerate(function(){
			// var kindHasF = flip(bins[discrete(discretizeBeta(g0,d0))])
			var kindHasF = flip(hasF)

			var prevalenceGivenK = kindHasF ? bins[discrete(discretizeBeta(g1,d1))] : 
											kindDoesntHaveF_prevalence

			return prevalenceGivenK
		})
		// console.log('after prev')
	return getProbsFromERP(prevalencePrior, [0, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99])
}




//var scoreFunction = function(d, prob_hasF, a, b){
// var scoreFunction = function(d, a, b){
// 	// var x1 = (d==0) ? (1-prob_hasF) : 0
// //	var x2 =  (prob_hasF)*Math.exp(betaERP.score([a, b], alignPrevalence(d)))
// 	var x2 =  (prob_hasF + betaERP.score([a, b], alignPrevalence(d)))
// 	// console.log('begin computation of score function')
// 	// console.log('end computation of score function')
// 	return x2
// }

var guessing = 1/bins.length;


// var testproperties = ["have wings", "are female"]

var priorModel = function(){

	var phi = uniform(0,1)

	foreach(properties, function(p){

		var propertyData = subset(df_prior, "Property", p)
		var responseData = _.pluck(propertyData, "prevalence")
		// console.log(p)
		// console.log(responseData)
		// console.log(propertyData)

		// var gamma_across = uniform(0,1)
		// var delta_across = uniform(0,20)
		// var prob_hasF = beta(shape_alpha(gamma_across, delta_across),
		// 					  	   shape_beta(gamma_across, delta_across))
		var prob_hasF = beta(1,1)
		// console.log(p + ' ' + map(function(x){return x!=0}, responseData))
		var scr1 = reduce(function(d, memo) {
							// console.log(d)
						    return memo + bernoulliERP.score([prob_hasF], d!=0)
							}, 0, responseData)
		// console.log(scr1)
		factor(scr1)

		query.add(["prevalencePrior",p,"na","prob_hasF"], prob_hasF)

		var gamma = uniform(0,1)
		var delta = uniform(0,50)


		// var discretized_prevalence = discretizedPriorModel(prob_hasF, gamma, delta)
		var discreteBetaProbs = discretizeBeta(gamma, delta)
		var discreteBetaProbsNormalized = map(function(x){return x/sum(discreteBetaProbs)}, discreteBetaProbs)

		// console.log('after scr2')
		// var priorERP = discretizedPriorModel(gamma_across, delta_across, gamma_within, delta_within)
		// console.log(propertyData)
		// console.log(propertyData)
		// var scr2 = reduce(function(d, memo) {
		// 					// console.log(d)
		// 					var x = d==0? 0 : betaERP.score([shape_alpha(gamma, delta), 
		// 				    									shape_beta(gamma, delta)], alignPrevalence(d))
		// 				    return memo + x
		// 					}, 0, responseData)

		var scr2 = reduce(function(d, memo) {

							// console.log(p+ ' prev = ' +  d + '  aligned prev = ' + alignPrevalence(d))
							// console.log(bins.indexOf(alignPrevalence(d)))
							// console.log(discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
							var x = d==0? 0 :  
								Math.log(
									(phi*guessing) + 
									((1-phi) * discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
									)
						    return memo + x
							}, 0, responseData)


		// var scr = reduce(function(dataPoint, memo) {
		// 				    return memo + priorERP.score([], alignPrevalence(dataPoint))
		// 					}, 0, propertyData)
		// console.log(p+' ' +scr2)
		factor(scr2)
		// var postpred = beta(shape_alpha(gamma, delta), shape_beta(gamma,delta))
		// var postpred = sample(discreteBeta)
		// var postpred = bins[discrete(discreteBetaProbsNormalized)]
		// query.add(["prevalencePrior",p,"na","prob_hasF"], prob_hasF)
		query.add(["prevalencePrior",p,"na","gamma_within"], gamma)
		query.add(["prevalencePrior",p,"na","delta_within"], delta)
		// query.add(["prevalencePrior",p,])
		// console.log(discretized_prevalence)
		// query.add(["prevalencePrior",p,"na","beta"], postpred)
		// foreach(_.zip(discretized_prevalence, [0, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99]),
		// 	function(x){query.add(['prevalencePrior',p,x[1],"posteriorPredictive"], x[0])}
		// )
	})

	query.add(["prevalencePrior","na","na","phi"], phi)

	return query
}

var mhiter = 10000

var resultsERP = IncrementalMH(priorModel, mhiter, {"verbose":"true"})
// resultsERP
// var outfile = 'results/generics-tj-prevalencePrior_hasFUNIF-has0-postpred-incr'+mhiter+'a.csv'
var outfile = 'results/generics-tj-prevalencePrior_discreteBeta-hasFUNIF-delta50-has0-phi-incr'+mhiter+'a.csv'

truthUtils.erpWriter(resultsERP, outfile)
console.log('wrote to... ' + outfile)


// properties

// map(function(x){return [x, x==0]}, _.pluck(subset(df_prior, "Property", "have manes"),"prevalence"))
//IncrementalMH(function(){return priorModel("attack swimmers")}, 10)


// var priorModel = function(p){

// 	var propertyData = _.pluck(subset(df_prior, "Property", p),"prevalence")

// 	// var gamma_across = uniform(0,1)
// 	// var delta_across = uniform(0,20)
// 	var prob_hasF = beta(1,1)
// 	// var prob_hasF = beta(shape_alpha(gamma_across, delta_across),
// 	// 					  shape_beta(gamma_across, delta_across))

// 	var scr1 = reduce(function(d, memo) {
// 					    return memo + bernoulliERP.score([prob_hasF], d!=0)
// 						}, 0, propertyData)
// 	// console.log(scr1)
// 	factor(scr1)

// 	var gamma = uniform(0,1)
// 	var delta = uniform(0,20)

// 	var scr2 = reduce(function(d, memo) {
// 						var x = d==0? 0 : betaERP.score([shape_alpha(gamma, delta), 
// 					    								shape_beta(gamma, delta)], 
// 					    								alignPrevalence(d))
// 					    return memo + x
// 						}, 0, propertyData)
// 	factor(scr2)
// 	// console.log(scr)
// 	return discretizedPriorModel(prob_hasF, gamma, delta)
// }


// MH(function(){return priorModel("attack swimmers")}, 10)


