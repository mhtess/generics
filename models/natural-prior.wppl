// time webppl natural-prior.wppl --require-js ./truthutils.js --require-wppl ./natural-cases-prior.wppl 

var getProbsFromERP = function(myERP, orderedSupport){
	return map(function(s){
		Math.exp(myERP.score([], s))
	}, orderedSupport)
}
var discretizedPriorModel = function(g0, d0, g1, d1){
//var discretizedPriorModel = function(hasF, g1, d1){
	// var hasF = makeBetaBernoulli([shape_alpha(g0,d0), shape_beta(g0,d0)])()
	// var prevalence = hasF ? beta()
	var kindDoesntHaveF_prevalence = 0.01
	// var kindDoesntHaveF_prevalence = 0
	// discretization occurs here
	var prevalencePrior = 
		Enumerate(function(){
			var kindHasF = flip(bins[discrete(discretizeBeta(g0,d0))])
//			var kindHasF = flip(hasF)

			var prevalenceGivenK = kindHasF ? bins[discrete(discretizeBeta(g1,d1))] : 
											kindDoesntHaveF_prevalence

			return prevalenceGivenK
		})

	return prevalencePrior
}

var priorModel = function(p){

	var propertyData = _.pluck(subset(df_prior, "Property", p),"prevalence")

	var gamma_across = uniform(0,1)
	var delta_across = uniform(0,20)
//			var prob_hasF = uniform(0,1)
	// var prob_hasF = beta(shape_alpha(gamma_across, delta_across),
	// 					  shape_beta(gamma_across, delta_across))
	var gamma_within = uniform(0,1)
	var delta_within = uniform(0,20)
//			var priorERP = discretizedPriorModel(prob_hasF, gamma_within, delta_within)
	var priorERP = discretizedPriorModel(gamma_across, delta_across, gamma_within, delta_within)

	// var scr = reduce(function(dataPoint, memo) {
	// 					// console.log(dataPoint)
	// 				    return memo + scoreFunction(avoidUpperBound(dataPoint/100), prob_hasF, gamma_within, delta_within)
	// 					}, 0, propertyData)
	var scr = reduce(function(dataPoint, memo) {
					    return memo + priorERP.score([], alignPrevalence(dataPoint))
						}, 0, propertyData)

	factor(scr)
	// console.log(scr)

	return getProbsFromERP(priorERP, bins)
}

// MH(function(){return priorModel("attack swimmers")}, 10)


