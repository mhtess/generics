
//////// writing prior
// var writeReady = map(function(key){
// 		var m = marginalize(resultsERP, key)
// 		return [key, expectation(marginalize(m, 0)), expectation(marginalize(m, 1))]
// 	},
// 	_.keys(resultsERP.support()[0])
// )
// writeReady.unshift(["key","gamma","delta"])

// asymutils.writeCSV(writeReady, "results/expVal_betas_prior2_incrMH10k.csv")
////////


//////// generics model

// var bins = [0,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
// var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,
//          0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
// var stateBins = [0,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
var thetaBins = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

// var thetaBins = priorERP.support()

var thetaPrior = function() {
  var threshold = uniformDraw(thetaBins)//something might go(?) wonky if "generic is false" can never be false
  return threshold
}

var utterancePrior = function() {
   // var utterances = ["generic is true",
   //                  "generic is false"]
   var utterances = ["generic is true", "mu"]  
  var cost = 1      
  var cst = [1,cost]       
  return utterances[discrete(cst)]

}

var meaning = function(utt,state, theta) {
  return _.isNumber(utt) ? state == utt :
  		   utt=="generic is true"? state>theta :
         utt=="generic is false"? state<=theta :
         utt=="some is true"? state>0 :
         utt=="some is false"? state==0 :
         utt=='mu'? true:
         utt=='some'? state>0:
         utt=='most'? state>= 0.5:
         utt=='all'? state >= 0.99:
         true
}

var listener0 = cache(function(utterance, theta, prior) {
  Infer({method: "enumerate"},function(){
    var state = sample(prior)
    var m = meaning(utterance, state, theta)
    condition(m)
    return state
  })
})

var speaker1 = cache(function(state, theta, prior, s1optimality) {
  Infer({method: "enumerate"}, function(){

    var utterance = utterancePrior()
    var L0 = listener0(utterance, theta, prior)

    factor(s1optimality*L0.score(state))

    return utterance
  })
})


var listener1 = cache(function(utterance, prior, s1optimality) {
  Infer({method: "enumerate"}, function(){
    var state = sample(prior)
    var theta = thetaPrior()
    var S1 = speaker1(state, theta, prior, s1optimality)
    
    factor(S1.score(utterance))

    return state
  })
})

var speaker2 = function(pfk, prior, s1optimality, s2optimality){
  Infer({method: "enumerate"}, function(){
    var utterance = utterancePrior()
    var L1 = listener1(utterance, prior, s1optimality)
    factor(s2optimality*L1.score(pfk))
    return utterance == "generic is true" ? 1 : 0
  })
}