// ~/webppl-infer/webppl dobles.wppl --require mht --require utils
// Prior: load saved results 

var conditions = ["part", "color"];//_.uniq(_.pluck(df,"type"))

var questionDictionary = {
	"response0":"across",
	"response1":"within"
}

var priorERPobject = _.object(map(function(i){
	console.log('loading prior ERP for ' + i)
	return [i, _.object(map(function(dm){
			var fpath = "priors_results/priors"+i+"_"+questionDictionary[dm]+".csv"
			var df = readQueryERP(fpath)
			return [dm, df]
		}, ["response0", "response1"]))]
},conditions))

// Dobles data: Load predictive data

var data_predictive = mht.readCSV("../../data/predictive/predictive-elicitation-1-trials.csv").data
var df_predictive = dataFrame(data_predictive.slice(0, data_predictive.length-1), ["response"])

var origins = _.uniq(_.pluck(df_predictive, "origins"))
var outcomes = _.uniq(_.pluck(df_predictive, "event_outcome"))

var avg_predictive_prevalence = _.object(map(function(property){
	var property_data = subset(df_predictive, "stim_proptype", property)
	return [property , _.object(map(function(a){
		var origin_data = subset(property_data, "origins", a)
		return [a, _.object(map(function(b){
			var outcome_data = _.pluck(subset(origin_data, "event_outcome", b), "response");
			var mean_prev = listMean(outcome_data);
			var rounded_mean_prev = nearestBin(mean_prev, bins);
			return [b, rounded_mean_prev]
		}, outcomes))]
	}, origins))]
}, ["color", "part"]))

// Dobles data: Load truth judgmenet data
var data_truth = mht.readCSV("../../data/predictive/predictive-1-trials.csv").data
var df_truth = dataFrame(data_truth.slice(0, data_truth.length-1), ["response"])


var model = function(){
	var speaker1_optimality = sample(UniformDrift({a: 0, b: 20, r: 1.0}));
	var speaker2_optimality = sample(UniformDrift({a: 0, b: 5, r: 0.5}));


	// var pr_exist_param = sample(priorERPobject["part"]["response0"]); //exist params
	// var pr_project_param = sample(priorERPobject["part"]["response1"]); 
	// var pr_exist = beta(pr_exist_param.a, pr_exist_param.b);
	// var prior = structuredPrior(pr_exist, pr_project_param.a, pr_project_param.b);

	// color, part
	foreach(["color", "part"], function(p){

		var pr_exist_param = sample(priorERPobject[p]["response0"]); //exist params
		var pr_project_param = sample(priorERPobject[p]["response1"]); 

		var pr_exist = beta(pr_exist_param.a, pr_exist_param.b);

		var prior = structuredPrior(pr_exist, pr_project_param.a, pr_project_param.b);

		// origins X outcome
		foreach(origins, function(or){
			var origin_data = subset(df_truth, "origins", or)

			foreach(outcomes, function(ou){
				var response_data = _.pluck(subset(origin_data, "event_outcome", ou), "response")
				var pfk = avg_predictive_prevalence[p][or][ou]

				var s2 = speaker2(pfk, prior, speaker1_optimality, speaker2_optimality)

				var scrs = map(function(d) { return s2.score(d) }, response_data)

				factor(sum(scrs))

				query.add(["s2_predictive", p, or, ou], expectation(s2))

			})
		})

	})

	query.add(["parameter", "s1_optimality", "NA", "NA"], speaker1_optimality)
	query.add(["parameter", "s2_optimality", "NA", "NA"], speaker2_optimality)
	return query

}
var samples = 5000
var burn = samples/2
var inferopts = {method: 'MCMC', samples: samples, burn: burn, verbose:true}

var posterior = Infer(inferopts, model)

var outputFile = "model_results/dobles-byProperty-byPropertyPriors-MH" + samples/1000 + "k_burn" + burn/1000 +"k.csv"

var header = "Type,Parameter,Origin,Outcome,Value"
mht.erpWriter(posterior, outputFile, header)

console.log("written to " + outputFile)
