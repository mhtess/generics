// time webppl natural-cases-prior.wppl --require-js ./truthUtils.js 

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var subset = function(df, field, value){
	return filter(function(d){
		return (d[field]==value)
	},df)
}

// use first row as (header) variable names
var dataFrame = function(rawCSV){
    return map(function(row){
        return _.object(_.zip(rawCSV[0],row))
    }, rawCSV.slice(1))
}


var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}

var Priordata = truthUtils.readCSV("data/real-kinds-prior-2-trials-formatted.csv").data
// var Priordata = _.flatten([Priordata0, Priordata0.slice(1)],true)

var Truthdata = truthUtils.readCSV("data/real-kinds-truth-1-trials-formatted.csv").data

var df_prior = dataFrame(Priordata)
var df_truth = dataFrame(Truthdata)

var properties = _.uniq(_.pluck(df_prior,"Property"))

var avoidEnds = function(response){
	return response==0 ? 0.01 : response==1 ? 0.99 : response
}

var avoidUpperBound = function(response){
	return response==1 ? 0.99 : response
}

var alignPrevalence = function(number){
	return avoidEnds(Math.round(number/10)/10)
//	return avoidEnds(Math.round(number/5)/20)
}


// var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,
// 				 0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var discretizeBeta = function(gamma, delta){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}

var getProbsFromERP = function(myERP, orderedSupport){
	return map(function(s){
		Math.exp(myERP.score([], s))
	}, orderedSupport)
}

// var properties = ["are female", "carry malaria"]

var guessing = 1/bins.length;


var prevalenceModel = function(){

	var phi = uniform(0,1)

	foreach(properties, function(p){
		var propertyData = subset(df_prior, "Property", p)
		var categories = _.uniq(_.pluck(subset(df_truth, "Property", p), "Category"))


		foreach(categories, function(k){
			var categoryData = _.pluck(subset(propertyData, "Category", k), "prevalence")
			var gamma = uniform(0,1)
			var delta = uniform(0,20)


			var discreteBetaProbs = discretizeBeta(gamma, delta)
			var discreteBetaProbsNormalized = map(function(x){return x/sum(discreteBetaProbs)}, discreteBetaProbs)


			// console.log(gamma, delta)

			// var scr = reduce(function(d, memo) {
			// 			// console.log(p+ k+ ' prev = ' +  d + '  aligned prev = ' + alignPrevalence(d))
			// 			// console.log(bins.indexOf(alignPrevalence(d)))
			// 			// console.log(discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
			// 			var x = Math.log(discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
			// 		    return memo + x
			// 			}, 0, categoryData)

				var scr = reduce(function(d, memo) {
									// console.log(p+ ' prev = ' +  d + '  aligned prev = ' + alignPrevalence(d))
									// console.log(bins.indexOf(alignPrevalence(d)))
									// console.log(discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
									var x = Math.log(
											(phi*guessing) + 
											((1-phi) * discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
											)
								    return memo + x
									}, 0, categoryData)






			// var scr = reduce(function(dataPoint, memo) {
			// 			console.log(avoidEnds(dataPoint/100))
			// 				    return memo + betaERP.score([shape_alpha(gamma, delta),
			// 				    							 shape_beta(gamma,delta)], 
			// 				    							 avoidEnds(dataPoint/100))
			// 					}, 0, categoryData)

			factor(scr)
			// console.log(scr)

			// var postpred = beta(shape_alpha(gamma, delta), shape_beta(gamma,delta))
			// var postpred = bins[discrete(discreteBetaProbsNormalized)]

			query.add([k,p], gamma)

			// query.add(["prevalence",p, k, "gamma"], gamma)
			// query.add(["prevalence",p, k, "delta"], delta)


			// query.add(["prevalence",p, k, "beta"], postpred)

			// var discretized_prevalence = discretizeBeta(gamma, delta)
			// foreach(_.zip(discretized_prevalence, bins),
			// 	function(x){query.add(['prevalencePrior',p,k,x[1]], x[0])}
			// )
		})
	})

	// query.add(["prevalence","na", "na", "phi"], phi)

	return query
}

var mhiter = 10000


var resultsERP = IncrementalMH(prevalenceModel, mhiter, {"verbose":"true"})

var marginalizeERP = function(myERP, label){
	Enumerate(function(){
		var x = sample(resultsERP)
		return x[label]
	})
}

marginalizeERP(resultsERP, ["Leopards", "have spots"])

// resultsERP
// var outfile = 'results/generics-tj-prevalencePrior_hasFUNIF-has0-postpred-incr'+mhiter+'a.csv'
// var outfile = 'results/generics-tj-prevalence_discreteBeta-delta50-phi-incr'+mhiter+'a.csv'

// truthUtils.erpWriter(resultsERP, outfile)
// console.log('wrote to... ' + outfile)


