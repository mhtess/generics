// time webppl natural-cases-prior.wppl --require-js ./truthutils.js 

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var subset = function(df, field, value){
	return filter(function(d){
		return (d[field]==value)
	},df)
}


var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}

var Priordata = truthutils.readCSV("data/real-kinds-prior-2-trials-formatted.csv").data
var Truthdata = truthutils.readCSV("data/real-kinds-truth-1-trials-formatted.csv").data

var df_truth = map(
	function(lst){
		return _.object(_.zip(Truthdata[0],lst))
	},
	Truthdata.slice(1))

var df_prior = map(
	function(lst){
		return _.object(_.zip(Priordata[0],lst))
	},
	Priordata.slice(1))

var properties = _.uniq(_.pluck(df_prior,"Property"))

var avoidEnds = function(response){
	return response==0 ? 0.01 : response==1 ? 0.99 : response
}

var avoidUpperBound = function(response){
	return response==1 ? 0.99 : response
}

var alignPrevalence = function(number){
	return avoidEnds(Math.round(number/10)/10)
//	return avoidEnds(Math.round(number/5)/20)
}


// var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,
// 				 0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var discretizeBeta = function(gamma, delta){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}

var getProbsFromERP = function(myERP, orderedSupport){
	return map(function(s){
		Math.exp(myERP.score([], s))
	}, orderedSupport)
}



var prevalenceModel = function(){
	foreach(properties, function(p){
		var propertyData = subset(df_prior, "Property", p)
		var categories = _.uniq(_.pluck(propertyData, "Category"))


		foreach(categories, function(k){
			var categoryData = _.pluck(subset(subset(df_truth, "Property", p), "Category", k), "prevalence")
			var gamma = uniform(0,1)
			var delta = uniform(0,20)

			var scr = reduce(function(dataPoint, memo) {
							    return memo + betaERP.score([shape_alpha(gamma, delta),
							    							 shape_beta(gamma,delta)], 
							    							 avoidEnds(dataPoint/100))
								}, 0, categoryData)

			factor(scr)
			// console.log(scr)


			query.add(["prevalence",p, k, "gamma"], gamma)
			query.add(["prevalence",p, k, "delta"], delta)

			// var discretized_prevalence = discretizeBeta(gamma, delta)
			// foreach(_.zip(discretized_prevalence, bins),
			// 	function(x){query.add(['prevalencePrior',p,k,x[1]], x[0])}
			//)
		})
	})
	return query
}

var mhiter = 1000

var resultsERP = IncrementalMH(prevalenceModel, mhiter, {"verbose":"true"})

var outfile = 'results/generics-tj-prevalence-incr'+mhiter+'.csv'
truthutils.erpWriter(resultsERP, outfile)
console.log('wrote to... ' + outfile)


// var prevalenceModel = function(k, p){

// 	var propertyData = subset(subset(df_prior, "Property", p),"Category", k),"prevalence")

// 	var gamma = uniform(0,1)
// 	var delta = uniform(0,20)

// 	var scr = reduce(function(dataPoint, memo) {
// 					    return memo + betaERP.score([shape_alpha(gamma, delta),
// 					    							 shape_beta(gamma,delta)], avoidEnds(dataPoint/100))
// 						}, 0, propertyData)

// 	factor(scr)
// 	// console.log(scr)

// 	// var discretized_prevalence = avoidEnds(Math.round(gamma*10)/10)
// 	var discretized_prevalence = bins[discrete(discretizeBeta(gamma, delta))]
// 	return discretized_prevalence
// }





// MH(function(){return prevalenceModel("Sharks", "attack swimmers")},10)
