// webppl asymmetry.wppl --require-js ./asymutils.js   --require-wppl ./lvrsa.wppl --require-wppl prior.wppl 


//////// writing
// var writeReady = map(function(key){
// 		var m = marginalize(resultsERP, key)
// 		return [key, expectation(marginalize(m, 0)), expectation(marginalize(m, 1))]
// 	},
// 	_.keys(resultsERP.support()[0])
// )
// writeReady.unshift(["key","gamma","delta"])

// asymutils.writeCSV(writeReady, "results/expVal_betas_prior2_incrMH10k.csv")
////////

//////// generics model
// var data = asymutils.readCSV("data/asymmetry-1-trials.csv").data

// var df_asym = map(
// 	function(lst){
// 		return _.object(_.zip(data[0],lst))
// 	},
// 	data.slice(1))


// var tasks = _.uniq(_.pluck(df_asym, "trial_type"))
// var stimTypes = _.uniq(_.pluck(df_asym, "stim_type"))

// var df_accepted = subset(df_asym, "trial_type", "truth_conditions")
// var df_implied = subset(df_asym, "trial_type", "implied_prevalence")

// var prevalenceLevels = _.uniq(_.pluck(df_accepted, "stim_prevalence"))

// var dataModel = function(){

// 	foreach(tasks,
// 		function(task){


// 			foreach(stimTypes, 
// 				function(type){

// 					if (task=="truth_conditions") {

// 						foreach(prevalenceLevels,
// 							function(prevalence){

// 								var df_accepted_prev = _.pluck(subset(df_accepted, "stim_prevalence", prevalence), "response")
// 								var predictiveERP = truthSpeaker2(prevalence, s1opt, number_s1opt)

// 								var scr = reduce(function(response, memo) {
// 												    return memo + predictiveERP.score([], response)
// 													}, 0, df_accepted_prev)
// 								factor(scr)

// 								query.add(,)


// 							})

// 					}

// 				})

// 		})
// }

// stimTypes

//truthSpeaker2(0.1, 2, 2)
//priorERP
expectation(numberSpeaker2("generic is true",2,1))