// time webppl asymmetry.wppl --require-js ./asymutils.js --require-wppl ./lvrsa.wppl --require-wppl ./prior.wppl 
// time webppl asymmetry.wppl --require asymutils

//var data = asymutils.readCSV("data/asymmetry-1-trials.csv").data
//var data = asymutils.readCSV("data/asymmetry-1-trials-medSplitAccidental.csv").data
//var data = asymutils.readCSV("data/asymmetry-2-trials.csv").data
var data0 = asymutils.readCSV("data/asymmetry-2-trials-medSplitAccidental.csv").data
var data = data0.slice(0, data0.length-1)
var df_asym = map(
	function(lst){
		return _.object(_.zip(data[0],lst))
	},
	data.slice(1))


var df_accepted = subset(df_asym, "trial_type", "truth_conditions")
var df_implied = subset(df_asym, "trial_type", "implied_prevalence")

var prevalenceLevels = _.uniq(_.pluck(df_accepted, "stim_prevalence"))

// var alignAgree = {"Agree":"generic is true",
// 				  "Disagree": "mu"}
var alignAgree = {"1":"generic is true",
				  "0": "mu"}

var alignImplied = function(number){
	return avoidEnds(Math.round(number*10)/10)
}

var softmaxAndGuessingLink = function(myERP, task, phi, power){
	Enumerate(function(){
		var states = myERP.support();
		var probs = map(function(x){return Math.exp(myERP.score([], x))}, states);
		var softmax_probs = map(function(x){return Math.pow(x, power)}, probs);

		var x = flip(1-phi) ? 
					states[discrete(softmax_probs)] :
					(task=="truth_conditions") ?
						["generic is true","mu"][discrete([0.5,0.5])] :
						uniformDraw(stateBins)

		return x
	})
}



var prioriter = 50000
var incropts = {"verbose":"true",
				"burnin": prioriter/2}
console.log('inferring prior')
var heirarchicalERP = {
               "accidental_low": IncrementalMH(function(){return priorModel("accidental_low")}, prioriter, incropts),
               "accidental_high": IncrementalMH(function(){return priorModel("accidental_high")}, prioriter, incropts),
                // "accidental":getPriorERP("accidental"),
                "color": IncrementalMH(function(){return priorModel("color")}, prioriter, incropts),
                "vague": IncrementalMH(function(){return priorModel("vague")}, prioriter, incropts),
                "part":IncrementalMH(function(){return priorModel("part")}, prioriter, incropts)
              }
console.log('prior inferred from prior elicitation data')

var getPrior = function(s, condition){
  var priorERP = Enumerate(function(){
      var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
      // var kindDoesntHaveF_prevalence = 0.01
      var kindDoesntHaveF_prevalence = 0
      var discretizeBeta = function(gamma, delta){
        var shape_alpha = gamma * delta
        var shape_beta = (1-gamma) * delta
        var betaPDF = function(x){
          return Math.pow(x,shape_alpha-1)*
              Math.pow((1-x),shape_beta-1)
        }
        return map(betaPDF, bins)
      }
      var kindHasF = flip(
              bins[discrete(
                discretizeBeta(
                  s[condition+",response0,gamma"], 
                  s[condition+',response0,delta']
                )
              )])
      var prevalenceGivenK = kindHasF ? bins[discrete(
                discretizeBeta(
                  s[condition+",response1,gamma"], 
                  s[condition+",response1,delta"]
                )
              )] : kindDoesntHaveF_prevalence

      return prevalenceGivenK
    })

 return map(function(x){return Math.exp(priorERP.score([],x))}, [0, 0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99])
}

var tasks = _.uniq(_.pluck(df_asym, "trial_type"))
//var stimTypes = _.uniq(_.pluck(df_asym, "stim_type"))
var stimTypes = _.keys(heirarchicalERP)


var dataModel = function(){

	// var number_s1opt = uniform(0,10)
	// var phi = 0
	// var phi = uniform(0.99,1.01)

	var phi = uniform(0,1)

	foreach(tasks,
		function(task){

			var speakerOptimality = uniform(0,20)

			foreach(stimTypes, 
				function(type){
					// console.log(type)
				    var s = sample(heirarchicalERP[type])
				    var prior = getPrior(s, type)

					if (task=="truth_conditions") {

						// var truth1opt = uniform(0,20)
						var truth2opt = 1//uniform(0,20)
//						var df_accept_type = subset(df_accepted, "stim_type", type)
						var df_accept_type = subset(df_accepted, "type", type)

						foreach(prevalenceLevels,
							function(prevalence){

								var df_accepted_prev = _.pluck(subset(df_accept_type,"stim_prevalence", prevalence), "response")
								// console.log(prevalence, type, s1opt, number_s1opt)
								var agreeERP = truthSpeaker2(prevalence/100, prior, speakerOptimality, 1)
								var linkedERP = softmaxAndGuessingLink(agreeERP, task, phi, truth2opt)

								// condition on both agree and disagree, or just agree?
								// right now, it's both.
								// var scr = reduce(function(response, memo) {
								// 				    return memo + agreeERP.score([], alignAgree[response])
								// 					}, 0, df_accepted_prev)

								var scr = reduce(function(response, memo) {
												    return memo + linkedERP.score([], alignAgree[response])
													}, 0, df_accepted_prev)
								factor(scr)
								// console.log(scr)

								query.add([task,type,prevalence],Math.exp(linkedERP.score([], "generic is true")))
								// query.add([task,type,prevalence],Math.exp(agreeERP.score([], "generic is true")))
							}
						)
					
						// query.add(["truthOptimality1","NA","NA"], truth1opt)
						// query.add(["truthOptimality2","NA","NA"], truth2opt)

					} else {
						// var implied1opt = uniform(0,20)
						var implied2opt = 1//uniform(0,20)

//						var df_implied_type = subset(df_implied, "stim_type", type)
						var df_implied_type = subset(df_implied, "type", type)

						var df_implied_prev = _.pluck(df_implied_type, "response")

//						console.log(df_implied_prev)

						// console.log(map(alignImplied,df_implied_prev))
						var impliedERP = numberSpeaker2("generic is true", prior, speakerOptimality, 1)
						// var impliedERP = listener1("generic is true", prior, implied1opt, 1)

						var linkedERP = softmaxAndGuessingLink(impliedERP, task, phi, implied2opt)

						// var scr = reduce(function(response, memo) {
						// 				    return memo + impliedERP.score([], alignImplied(response))
						// 					}, 0, df_implied_prev)

						var scr = reduce(function(response, memo) {
										    return memo + linkedERP.score([], alignImplied(response))
											}, 0, df_implied_prev)

						factor(scr)
						// console.log(task +' ' + type +  scr)


						query.add([task,type,"NA"], expectation(linkedERP))
						// query.add([task,type,"NA"], expectation(impliedERP))
						// query.add(["impliedOptimality1","NA","NA"], implied1opt)
						// query.add(["impliedOptimality2","NA","NA"], implied2opt)

					}

				})
	
		query.add(["speakerOptimality",task,"NA"], speakerOptimality)

		})

	query.add(["phi","NA","NA"], phi)

	return query

}


// var prior = IncrementalMH(function(){return priorModel("accidental_low")}, 100)
// var p = sample(prior)
// var r = numberSpeaker2("generic is true",getPrior(p,"accidental_low"), 1, 1)
// console.log(_.object(map(function(s){return [s,Math.exp(r.score([], s))]}, r.support())))
// var r1 = listener1("generic is true",getPrior(p,"accidental_low"), 1, 1)
// console.log(_.object(map(function(s){return [s,Math.exp(r1.score([], s))]}, r1.support())))
// var r2 =  softmaxAndGuessingLink(r1, "implied_prevalence", 0, 0.7)
// console.log(_.object(map(function(s){return [s,Math.exp(r2.score([], s))]}, r2.support())))


// var r1 = numberSpeaker2("generic is true",getPrior(p,"accidental_low"), 6, 1)
// console.log(map(function(s){return Math.exp(r1.score([], s))}, r1.support()))

//softmaxAndGuessingLink(r, "implied_prevalence", 0, 2)


//softmaxAndGuessingLink

var mhiter = 100000
var burn = mhiter / 2
var resultsERP = IncrementalMH(dataModel, mhiter, {"verbose":true, "burnin": burn})
//resultsERP
// dataModel()
 // IncrementalMH(function(){return priorModel("accidental-low")}, 100)

// var s = sample(heirarchicalERP["accidental-low"])
// var prior = getPrior(s, "accidental-low")


// // var agreeERP = truthSpeaker2(0.1, prior, 1, 1)
// var impliedERP = numberSpeaker2("generic is true", prior, 1, 1)
// impliedERP
// var outfile = "results/generics-soWord-soNumber-phi-hashmh"+	mhiter+"_prior2-incrmh1000.csv"
//var outfile = "results/generics-truthOpt-impliedOpt-hashmh"+mhiter+"_prior2-incrmh1000.csv"
// var outfile = "results/generics-fixedparams-nophi-hashmh"+mhiter+"_prior2-incrmh1000.csv"
//var outfile = "results/generics-priorUncertainty-phi-hashmh"+mhiter+"_asym2-prior4-incrmh10k.csv"

var outfile = "../manuscript/model-results/generics-asymmetry-2so-1phi-incrmh"+mhiter+"_burn"+burn+"-incrmh"+prioriter/1000+"kb.csv"
// var outfile = "results/generics-priorUncertainty-2opts-hashmh"+mhiter+"_asym2-prior4-incrmh"+prioriter/1000+"k.csv"
//var outfile = "results/generics-priorUncertainty-hashmh"+mhiter+"_asym2-prior4-incrmh10k.csv"

console.log('inference complete')
asymutils.erpWriter(resultsERP, outfile)
console.log("ouput written to " +outfile)
